
Telemetry_2018.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00000e42  00000ed6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e42  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000186  00800128  00800128  00000efe  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000efe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f5c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000157f  00000000  00000000  00001034  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e12  00000000  00000000  000025b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000798  00000000  00000000  000033c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000198  00000000  00000000  00003b60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006f6  00000000  00000000  00003cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000063a  00000000  00000000  000043ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00004a28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	64 c0       	rjmp	.+200    	; 0xce <__bad_interrupt>
   6:	00 00       	nop
   8:	62 c0       	rjmp	.+196    	; 0xce <__bad_interrupt>
   a:	00 00       	nop
   c:	60 c0       	rjmp	.+192    	; 0xce <__bad_interrupt>
   e:	00 00       	nop
  10:	5e c0       	rjmp	.+188    	; 0xce <__bad_interrupt>
  12:	00 00       	nop
  14:	5c c0       	rjmp	.+184    	; 0xce <__bad_interrupt>
  16:	00 00       	nop
  18:	5a c0       	rjmp	.+180    	; 0xce <__bad_interrupt>
  1a:	00 00       	nop
  1c:	58 c0       	rjmp	.+176    	; 0xce <__bad_interrupt>
  1e:	00 00       	nop
  20:	56 c0       	rjmp	.+172    	; 0xce <__bad_interrupt>
  22:	00 00       	nop
  24:	54 c0       	rjmp	.+168    	; 0xce <__bad_interrupt>
  26:	00 00       	nop
  28:	52 c0       	rjmp	.+164    	; 0xce <__bad_interrupt>
  2a:	00 00       	nop
  2c:	50 c0       	rjmp	.+160    	; 0xce <__bad_interrupt>
  2e:	00 00       	nop
  30:	4e c0       	rjmp	.+156    	; 0xce <__bad_interrupt>
  32:	00 00       	nop
  34:	4c c0       	rjmp	.+152    	; 0xce <__bad_interrupt>
  36:	00 00       	nop
  38:	4a c0       	rjmp	.+148    	; 0xce <__bad_interrupt>
  3a:	00 00       	nop
  3c:	48 c0       	rjmp	.+144    	; 0xce <__bad_interrupt>
  3e:	00 00       	nop
  40:	46 c0       	rjmp	.+140    	; 0xce <__bad_interrupt>
  42:	00 00       	nop
  44:	44 c0       	rjmp	.+136    	; 0xce <__bad_interrupt>
  46:	00 00       	nop
  48:	43 c0       	rjmp	.+134    	; 0xd0 <__vector_18>
  4a:	00 00       	nop
  4c:	40 c0       	rjmp	.+128    	; 0xce <__bad_interrupt>
  4e:	00 00       	nop
  50:	3e c0       	rjmp	.+124    	; 0xce <__bad_interrupt>
  52:	00 00       	nop
  54:	3c c0       	rjmp	.+120    	; 0xce <__bad_interrupt>
  56:	00 00       	nop
  58:	3a c0       	rjmp	.+116    	; 0xce <__bad_interrupt>
  5a:	00 00       	nop
  5c:	38 c0       	rjmp	.+112    	; 0xce <__bad_interrupt>
  5e:	00 00       	nop
  60:	36 c0       	rjmp	.+108    	; 0xce <__bad_interrupt>
  62:	00 00       	nop
  64:	34 c0       	rjmp	.+104    	; 0xce <__bad_interrupt>
  66:	00 00       	nop
  68:	32 c0       	rjmp	.+100    	; 0xce <__bad_interrupt>
  6a:	00 00       	nop
  6c:	30 c0       	rjmp	.+96     	; 0xce <__bad_interrupt>
  6e:	00 00       	nop
  70:	2e c0       	rjmp	.+92     	; 0xce <__bad_interrupt>
  72:	00 00       	nop
  74:	2c c0       	rjmp	.+88     	; 0xce <__bad_interrupt>
  76:	00 00       	nop
  78:	2a c0       	rjmp	.+84     	; 0xce <__bad_interrupt>
  7a:	00 00       	nop
  7c:	28 c0       	rjmp	.+80     	; 0xce <__bad_interrupt>
  7e:	00 00       	nop
  80:	26 c0       	rjmp	.+76     	; 0xce <__bad_interrupt>
  82:	00 00       	nop
  84:	24 c0       	rjmp	.+72     	; 0xce <__bad_interrupt>
  86:	00 00       	nop
  88:	22 c0       	rjmp	.+68     	; 0xce <__bad_interrupt>
  8a:	00 00       	nop
  8c:	20 c0       	rjmp	.+64     	; 0xce <__bad_interrupt>
  8e:	00 00       	nop
  90:	1e c0       	rjmp	.+60     	; 0xce <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	e2 e4       	ldi	r30, 0x42	; 66
  a8:	fe e0       	ldi	r31, 0x0E	; 14
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	a8 32       	cpi	r26, 0x28	; 40
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
  ba:	22 e0       	ldi	r18, 0x02	; 2
  bc:	a8 e2       	ldi	r26, 0x28	; 40
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	ae 3a       	cpi	r26, 0xAE	; 174
  c6:	b2 07       	cpc	r27, r18
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	f5 d1       	rcall	.+1002   	; 0x4b6 <main>
  cc:	b8 c6       	rjmp	.+3440   	; 0xe3e <_exit>

000000ce <__bad_interrupt>:
  ce:	98 cf       	rjmp	.-208    	; 0x0 <__vectors>

000000d0 <__vector_18>:

/**************************************************************************************************
*   CAN ISR - See 'can.h' Header file for Description
**************************************************************************************************/
ISR(CANIT_vect)
{
  d0:	1f 92       	push	r1
  d2:	0f 92       	push	r0
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	0f 92       	push	r0
  d8:	11 24       	eor	r1, r1
  da:	0b b6       	in	r0, 0x3b	; 59
  dc:	0f 92       	push	r0
  de:	2f 93       	push	r18
  e0:	3f 93       	push	r19
  e2:	4f 93       	push	r20
  e4:	5f 93       	push	r21
  e6:	6f 93       	push	r22
  e8:	8f 93       	push	r24
  ea:	9f 93       	push	r25
  ec:	af 93       	push	r26
  ee:	bf 93       	push	r27
  f0:	ef 93       	push	r30
  f2:	ff 93       	push	r31
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	1f 92       	push	r1
  fa:	cd b7       	in	r28, 0x3d	; 61
  fc:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t mob_status;

	uint8_t mob_interrupts = CANSIT2;
  fe:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>

	// TX
	if ((mob_interrupts & (1 << SIT0)) && (CANIE2 & (1 << ENMOB0))) {
 102:	80 ff       	sbrs	r24, 0
 104:	47 c0       	rjmp	.+142    	; 0x194 <__vector_18+0xc4>
 106:	90 91 de 00 	lds	r25, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
 10a:	90 ff       	sbrs	r25, 0
 10c:	43 c0       	rjmp	.+134    	; 0x194 <__vector_18+0xc4>
		CANPAGE = (0x0 << MOBNB0); //Select TX Mob (Mob0)
 10e:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		mob_status = CANSTMOB;
 112:	ee ee       	ldi	r30, 0xEE	; 238
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	89 83       	std	Y+1, r24	; 0x01
		CANSTMOB &= ~(1 << TXOK); //clear MB1, TX interrupt
 11a:	80 81       	ld	r24, Z
 11c:	8f 7b       	andi	r24, 0xBF	; 191
 11e:	80 83       	st	Z, r24

		if (tx_on != tx_off) {
 120:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <tx_off>
 124:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <tx_on>
 128:	98 17       	cp	r25, r24
 12a:	89 f1       	breq	.+98     	; 0x18e <__vector_18+0xbe>
			unsigned char pos;
			pos = tx_off & (TX_SIZE-1);
			//set ID
			CANIDT4 = tx_frames[pos].array[0];
 12c:	8f 70       	andi	r24, 0x0F	; 15
 12e:	2b e0       	ldi	r18, 0x0B	; 11
 130:	82 9f       	mul	r24, r18
 132:	c0 01       	movw	r24, r0
 134:	11 24       	eor	r1, r1
 136:	fc 01       	movw	r30, r24
 138:	e2 52       	subi	r30, 0x22	; 34
 13a:	fe 4f       	sbci	r31, 0xFE	; 254
 13c:	20 81       	ld	r18, Z
 13e:	20 93 f0 00 	sts	0x00F0, r18	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
			CANIDT2 = tx_frames[pos].array[0];
 142:	20 81       	ld	r18, Z
 144:	20 93 f2 00 	sts	0x00F2, r18	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
			CANIDT1 = tx_frames[pos].array[1];
 148:	21 81       	ldd	r18, Z+1	; 0x01
 14a:	20 93 f3 00 	sts	0x00F3, r18	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>

			//program data registers - auto increment CANMSG
			CANMSG = tx_frames[pos].data[0];
 14e:	23 81       	ldd	r18, Z+3	; 0x03
 150:	aa ef       	ldi	r26, 0xFA	; 250
 152:	b0 e0       	ldi	r27, 0x00	; 0
 154:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[1];
 156:	24 81       	ldd	r18, Z+4	; 0x04
 158:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[2];
 15a:	25 81       	ldd	r18, Z+5	; 0x05
 15c:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[3];
 15e:	26 81       	ldd	r18, Z+6	; 0x06
 160:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[4];
 162:	27 81       	ldd	r18, Z+7	; 0x07
 164:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[5];
 166:	20 85       	ldd	r18, Z+8	; 0x08
 168:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[6];
 16a:	21 85       	ldd	r18, Z+9	; 0x09
 16c:	2c 93       	st	X, r18
			CANMSG = tx_frames[pos].data[7];
 16e:	22 85       	ldd	r18, Z+10	; 0x0a
 170:	2c 93       	st	X, r18

			//set length and request send
			CANCDMOB = (1 << CONMOB0) | tx_frames[pos].length;
 172:	fc 01       	movw	r30, r24
 174:	e0 52       	subi	r30, 0x20	; 32
 176:	fe 4f       	sbci	r31, 0xFE	; 254
 178:	80 81       	ld	r24, Z
 17a:	8f 70       	andi	r24, 0x0F	; 15
 17c:	80 64       	ori	r24, 0x40	; 64
 17e:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
			tx_off++;
 182:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <tx_off>
 186:	8f 5f       	subi	r24, 0xFF	; 255
 188:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <tx_off>
 18c:	7d c0       	rjmp	.+250    	; 0x288 <__vector_18+0x1b8>
		} else {
			tx_busy = 0;
 18e:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <tx_busy>
 192:	7a c0       	rjmp	.+244    	; 0x288 <__vector_18+0x1b8>
		}
	}
	// RX
	else if ((mob_interrupts & (1 << SIT1)) && (CANIE2 & (1 << ENMOB1))) {
 194:	81 ff       	sbrs	r24, 1
 196:	78 c0       	rjmp	.+240    	; 0x288 <__vector_18+0x1b8>
 198:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
 19c:	81 ff       	sbrs	r24, 1
 19e:	74 c0       	rjmp	.+232    	; 0x288 <__vector_18+0x1b8>
		//Select RX Mob (Mob1)
		CANPAGE = (0x1 << MOBNB0);
 1a0:	80 e1       	ldi	r24, 0x10	; 16
 1a2:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		if (((rx_on - rx_off) & RX_ABS_MASK) < RX_SIZE) {
 1a6:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <rx_on>
 1aa:	28 2f       	mov	r18, r24
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <rx_off>
 1b2:	29 1b       	sub	r18, r25
 1b4:	31 09       	sbc	r19, r1
 1b6:	2f 77       	andi	r18, 0x7F	; 127
 1b8:	33 27       	eor	r19, r19
 1ba:	20 31       	cpi	r18, 0x10	; 16
 1bc:	31 05       	cpc	r19, r1
 1be:	0c f0       	brlt	.+2      	; 0x1c2 <__vector_18+0xf2>
 1c0:	58 c0       	rjmp	.+176    	; 0x272 <__vector_18+0x1a2>
			unsigned char pos;
			pos = rx_on & (RX_SIZE-1);
			//Read length
			rx_frames[pos].length = CANCDMOB & 0x0F;
 1c2:	e8 2f       	mov	r30, r24
 1c4:	ef 70       	andi	r30, 0x0F	; 15
 1c6:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 1ca:	2e 2f       	mov	r18, r30
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	4b e0       	ldi	r20, 0x0B	; 11
 1d0:	e4 9f       	mul	r30, r20
 1d2:	f0 01       	movw	r30, r0
 1d4:	11 24       	eor	r1, r1
 1d6:	e2 5d       	subi	r30, 0xD2	; 210
 1d8:	fe 4f       	sbci	r31, 0xFE	; 254
 1da:	9f 70       	andi	r25, 0x0F	; 15
 1dc:	42 81       	ldd	r20, Z+2	; 0x02
 1de:	40 7f       	andi	r20, 0xF0	; 240
 1e0:	94 2b       	or	r25, r20
 1e2:	92 83       	std	Z+2, r25	; 0x02
			//Read ID
			rx_frames[pos].array[0] = (CANIDT2 & 0xE0) | (CANIDT4 & 0x07);
 1e4:	40 91 f2 00 	lds	r20, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 1e8:	90 91 f0 00 	lds	r25, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 1ec:	40 7e       	andi	r20, 0xE0	; 224
 1ee:	97 70       	andi	r25, 0x07	; 7
 1f0:	94 2b       	or	r25, r20
 1f2:	90 83       	st	Z, r25
			rx_frames[pos].array[1] = CANIDT1;
 1f4:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 1f8:	91 83       	std	Z+1, r25	; 0x01

			//read data registers - auto increment CANMSG
			rx_frames[pos].data[0] = CANMSG;
 1fa:	aa ef       	ldi	r26, 0xFA	; 250
 1fc:	b0 e0       	ldi	r27, 0x00	; 0
 1fe:	9c 91       	ld	r25, X
 200:	93 83       	std	Z+3, r25	; 0x03
			rx_frames[pos].data[1] = CANMSG;
 202:	9c 91       	ld	r25, X
 204:	94 83       	std	Z+4, r25	; 0x04
			rx_frames[pos].data[2] = CANMSG;
 206:	9c 91       	ld	r25, X
 208:	95 83       	std	Z+5, r25	; 0x05
			rx_frames[pos].data[3] = CANMSG;
 20a:	9c 91       	ld	r25, X
 20c:	96 83       	std	Z+6, r25	; 0x06
			rx_frames[pos].data[4] = CANMSG;
 20e:	9c 91       	ld	r25, X
 210:	97 83       	std	Z+7, r25	; 0x07
			rx_frames[pos].data[5] = CANMSG;
 212:	9c 91       	ld	r25, X
 214:	90 87       	std	Z+8, r25	; 0x08
			rx_frames[pos].data[6] = CANMSG;
 216:	9c 91       	ld	r25, X
 218:	91 87       	std	Z+9, r25	; 0x09
			rx_frames[pos].data[7] = CANMSG;
 21a:	9c 91       	ld	r25, X
 21c:	92 87       	std	Z+10, r25	; 0x0a
			rx_on++;
 21e:	8f 5f       	subi	r24, 0xFF	; 255
 220:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <rx_on>

			// Reset if reset can message
			if(rx_frames[pos].id == 0x000 && rx_frames[pos].data[0] == 0x03){
 224:	40 81       	ld	r20, Z
 226:	42 95       	swap	r20
 228:	46 95       	lsr	r20
 22a:	47 70       	andi	r20, 0x07	; 7
 22c:	51 81       	ldd	r21, Z+1	; 0x01
 22e:	65 2f       	mov	r22, r21
 230:	66 0f       	add	r22, r22
 232:	66 0f       	add	r22, r22
 234:	66 0f       	add	r22, r22
 236:	86 2f       	mov	r24, r22
 238:	84 2b       	or	r24, r20
 23a:	95 2f       	mov	r25, r21
 23c:	92 95       	swap	r25
 23e:	96 95       	lsr	r25
 240:	97 70       	andi	r25, 0x07	; 7
 242:	89 2b       	or	r24, r25
 244:	b1 f4       	brne	.+44     	; 0x272 <__vector_18+0x1a2>
 246:	8b e0       	ldi	r24, 0x0B	; 11
 248:	82 9f       	mul	r24, r18
 24a:	f0 01       	movw	r30, r0
 24c:	83 9f       	mul	r24, r19
 24e:	f0 0d       	add	r31, r0
 250:	11 24       	eor	r1, r1
 252:	e2 5d       	subi	r30, 0xD2	; 210
 254:	fe 4f       	sbci	r31, 0xFE	; 254
 256:	83 81       	ldd	r24, Z+3	; 0x03
 258:	83 30       	cpi	r24, 0x03	; 3
 25a:	59 f4       	brne	.+22     	; 0x272 <__vector_18+0x1a2>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
 25c:	98 e0       	ldi	r25, 0x08	; 8
 25e:	88 e1       	ldi	r24, 0x18	; 24
 260:	0f b6       	in	r0, 0x3f	; 63
 262:	f8 94       	cli
 264:	a8 95       	wdr
 266:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 26a:	0f be       	out	0x3f, r0	; 63
 26c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 270:	ff cf       	rjmp	.-2      	; 0x270 <__vector_18+0x1a0>
				while(1); //wait for watchdog
			}
		}

		// Clear irq
		mob_status = CANSTMOB;
 272:	ee ee       	ldi	r30, 0xEE	; 238
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	80 81       	ld	r24, Z
 278:	89 83       	std	Y+1, r24	; 0x01
		(void)mob_status;
 27a:	89 81       	ldd	r24, Y+1	; 0x01

		CANSTMOB &= ~(1 << RXOK);
 27c:	80 81       	ld	r24, Z
 27e:	8f 7d       	andi	r24, 0xDF	; 223
 280:	80 83       	st	Z, r24
		CANCDMOB = (1 << CONMOB1);			//Set Mob 1 as RX
 282:	80 e8       	ldi	r24, 0x80	; 128
 284:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	}
}
 288:	0f 90       	pop	r0
 28a:	df 91       	pop	r29
 28c:	cf 91       	pop	r28
 28e:	ff 91       	pop	r31
 290:	ef 91       	pop	r30
 292:	bf 91       	pop	r27
 294:	af 91       	pop	r26
 296:	9f 91       	pop	r25
 298:	8f 91       	pop	r24
 29a:	6f 91       	pop	r22
 29c:	5f 91       	pop	r21
 29e:	4f 91       	pop	r20
 2a0:	3f 91       	pop	r19
 2a2:	2f 91       	pop	r18
 2a4:	0f 90       	pop	r0
 2a6:	0b be       	out	0x3b, r0	; 59
 2a8:	0f 90       	pop	r0
 2aa:	0f be       	out	0x3f, r0	; 63
 2ac:	0f 90       	pop	r0
 2ae:	1f 90       	pop	r1
 2b0:	18 95       	reti

000002b2 <can_init>:


void can_init(uint16_t accept_mask_id, uint16_t accept_tag_id) {
 2b2:	cf 93       	push	r28
 2b4:	df 93       	push	r29
	// Reset CAN controller
	CANGCON = (1 << SWRES);
 2b6:	e8 ed       	ldi	r30, 0xD8	; 216
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	21 e0       	ldi	r18, 0x01	; 1
 2bc:	20 83       	st	Z, r18

	CANBT1 = (BRP_VALUE - 1) << 1;
 2be:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	CANBT2 = ((SJW_VALUE - 1) << 5) | ((PROP_SEG - 1) << 1);
 2c2:	2c e0       	ldi	r18, 0x0C	; 12
 2c4:	20 93 e3 00 	sts	0x00E3, r18	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	CANBT3 = ((PHASE_SEG_2 - 1) << 4) | ((PHASE_SEG_1 - 1) << 1) | 1;
 2c8:	27 e3       	ldi	r18, 0x37	; 55
 2ca:	20 93 e4 00 	sts	0x00E4, r18	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>

	CANTIM = 0;
 2ce:	10 92 e7 00 	sts	0x00E7, r1	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7e00e7>
 2d2:	10 92 e6 00 	sts	0x00E6, r1	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7e00e6>
	CANTTC = 0;
 2d6:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 2da:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	CANHPMOB = 0;
 2de:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
	CANTCON = 0;
 2e2:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>

	// Switch to Mob 0 access
	CANPAGE = (0x0 << MOBNB0);
 2e6:	cd ee       	ldi	r28, 0xED	; 237
 2e8:	d0 e0       	ldi	r29, 0x00	; 0
 2ea:	18 82       	st	Y, r1
	CANSTMOB = 0;
 2ec:	ae ee       	ldi	r26, 0xEE	; 238
 2ee:	b0 e0       	ldi	r27, 0x00	; 0
 2f0:	1c 92       	st	X, r1

	// Switch to Mob 1 access
	CANPAGE = (0x1 << MOBNB0);
 2f2:	20 e1       	ldi	r18, 0x10	; 16
 2f4:	28 83       	st	Y, r18
	CANSTMOB = 0;
 2f6:	1c 92       	st	X, r1
	CANIDM4 = 0;
 2f8:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
	CANIDM2 = (accept_mask_id << 5) & 0xFF;
 2fc:	28 2f       	mov	r18, r24
 2fe:	22 95       	swap	r18
 300:	22 0f       	add	r18, r18
 302:	20 7e       	andi	r18, 0xE0	; 224
 304:	20 93 f6 00 	sts	0x00F6, r18	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
	CANIDM1 = (accept_mask_id >> 3) & 0xFF;
 308:	96 95       	lsr	r25
 30a:	87 95       	ror	r24
 30c:	96 95       	lsr	r25
 30e:	87 95       	ror	r24
 310:	96 95       	lsr	r25
 312:	87 95       	ror	r24
 314:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
	CANIDT4 = 0;
 318:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
	CANIDT2 = (accept_tag_id << 5) & 0xFF;
 31c:	86 2f       	mov	r24, r22
 31e:	82 95       	swap	r24
 320:	88 0f       	add	r24, r24
 322:	80 7e       	andi	r24, 0xE0	; 224
 324:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	CANIDT1 = (accept_tag_id >> 3) & 0xFF;
 328:	76 95       	lsr	r23
 32a:	67 95       	ror	r22
 32c:	76 95       	lsr	r23
 32e:	67 95       	ror	r22
 330:	76 95       	lsr	r23
 332:	67 95       	ror	r22
 334:	60 93 f3 00 	sts	0x00F3, r22	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>

	// Set Mob 1 as RX
	CANCDMOB = (1 << CONMOB1);
 338:	80 e8       	ldi	r24, 0x80	; 128
 33a:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	// Enable Mob 0 and 1
	CANEN2 = (1 << ENMOB1) | (1 << ENMOB0);
 33e:	83 e0       	ldi	r24, 0x03	; 3
 340:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
	// Enable Mob 0 and 1 Interrupt
	CANIE2 = (1 << ENMOB1) | (1 << ENMOB0);
 344:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	// Enable TX and RX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);	
 348:	80 eb       	ldi	r24, 0xB0	; 176
 34a:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>

	// Enable CAN controller
	CANGCON = (1 << ENASTB);
 34e:	82 e0       	ldi	r24, 0x02	; 2
 350:	80 83       	st	Z, r24

	reset = 0;
 352:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__data_end>
}
 356:	df 91       	pop	r29
 358:	cf 91       	pop	r28
 35a:	08 95       	ret

0000035c <can_read_message_if_new>:

bool can_read_message_if_new(CanMessage_t* message) {
 35c:	cf 93       	push	r28
 35e:	df 93       	push	r29
 360:	ec 01       	movw	r28, r24
	// Check if there is a new message
	if (rx_on == rx_off) {
 362:	40 91 2a 01 	lds	r20, 0x012A	; 0x80012a <rx_off>
 366:	20 91 29 01 	lds	r18, 0x0129	; 0x800129 <rx_on>
 36a:	24 17       	cp	r18, r20
 36c:	89 f1       	breq	.+98     	; 0x3d0 <can_read_message_if_new+0x74>
 36e:	a4 2f       	mov	r26, r20
 370:	af 70       	andi	r26, 0x0F	; 15
	}

	// Read the can frame
	can_frame* frame = &rx_frames[(rx_off & (RX_SIZE - 1))];

	message->id = frame->id;
 372:	8b e0       	ldi	r24, 0x0B	; 11
 374:	a8 9f       	mul	r26, r24
 376:	b0 01       	movw	r22, r0
 378:	11 24       	eor	r1, r1
 37a:	fb 01       	movw	r30, r22
 37c:	e2 5d       	subi	r30, 0xD2	; 210
 37e:	fe 4f       	sbci	r31, 0xFE	; 254
 380:	20 81       	ld	r18, Z
 382:	22 95       	swap	r18
 384:	26 95       	lsr	r18
 386:	27 70       	andi	r18, 0x07	; 7
 388:	31 81       	ldd	r19, Z+1	; 0x01
 38a:	53 2f       	mov	r21, r19
 38c:	55 0f       	add	r21, r21
 38e:	55 0f       	add	r21, r21
 390:	55 0f       	add	r21, r21
 392:	25 2b       	or	r18, r21
 394:	32 95       	swap	r19
 396:	36 95       	lsr	r19
 398:	37 70       	andi	r19, 0x07	; 7
 39a:	28 83       	st	Y, r18
 39c:	39 83       	std	Y+1, r19	; 0x01
	message->length = frame->length;
 39e:	fb 01       	movw	r30, r22
 3a0:	e0 5d       	subi	r30, 0xD0	; 208
 3a2:	fe 4f       	sbci	r31, 0xFE	; 254
 3a4:	20 81       	ld	r18, Z
 3a6:	2f 70       	andi	r18, 0x0F	; 15
 3a8:	2a 83       	std	Y+2, r18	; 0x02
	for (int i = 0; i < message->length; i++) {
 3aa:	22 23       	and	r18, r18
 3ac:	99 f0       	breq	.+38     	; 0x3d4 <can_read_message_if_new+0x78>
 3ae:	db 01       	movw	r26, r22
 3b0:	af 5c       	subi	r26, 0xCF	; 207
 3b2:	be 4f       	sbci	r27, 0xFE	; 254
 3b4:	fe 01       	movw	r30, r28
 3b6:	33 96       	adiw	r30, 0x03	; 3
 3b8:	30 e0       	ldi	r19, 0x00	; 0
 3ba:	2d 5f       	subi	r18, 0xFD	; 253
 3bc:	3f 4f       	sbci	r19, 0xFF	; 255
 3be:	ce 01       	movw	r24, r28
 3c0:	82 0f       	add	r24, r18
 3c2:	93 1f       	adc	r25, r19
		message->data.u8[i] = frame->data[i];
 3c4:	2d 91       	ld	r18, X+
 3c6:	21 93       	st	Z+, r18
	// Read the can frame
	can_frame* frame = &rx_frames[(rx_off & (RX_SIZE - 1))];

	message->id = frame->id;
	message->length = frame->length;
	for (int i = 0; i < message->length; i++) {
 3c8:	e8 17       	cp	r30, r24
 3ca:	f9 07       	cpc	r31, r25
 3cc:	d9 f7       	brne	.-10     	; 0x3c4 <can_read_message_if_new+0x68>
 3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <can_read_message_if_new+0x78>
}

bool can_read_message_if_new(CanMessage_t* message) {
	// Check if there is a new message
	if (rx_on == rx_off) {
		return false;
 3d0:	80 e0       	ldi	r24, 0x00	; 0
 3d2:	04 c0       	rjmp	.+8      	; 0x3dc <can_read_message_if_new+0x80>
		message->data.u8[i] = frame->data[i];
	}

	// Advance to next can message
	if (rx_on != rx_off) {
		rx_off++;
 3d4:	4f 5f       	subi	r20, 0xFF	; 255
 3d6:	40 93 2a 01 	sts	0x012A, r20	; 0x80012a <rx_off>
	}

	return true;
 3da:	81 e0       	ldi	r24, 0x01	; 1
}
 3dc:	df 91       	pop	r29
 3de:	cf 91       	pop	r28
 3e0:	08 95       	ret

000003e2 <transmit_can_to_serial>:
		else {printf("No new can-data \n");}
    }
}

void transmit_can_to_serial(CanMessage_t dataFrame)
{
 3e2:	af 92       	push	r10
 3e4:	bf 92       	push	r11
 3e6:	cf 92       	push	r12
 3e8:	df 92       	push	r13
 3ea:	ef 92       	push	r14
 3ec:	ff 92       	push	r15
 3ee:	0f 93       	push	r16
 3f0:	1f 93       	push	r17
 3f2:	cf 93       	push	r28
 3f4:	df 93       	push	r29
 3f6:	cd b7       	in	r28, 0x3d	; 61
 3f8:	de b7       	in	r29, 0x3e	; 62
 3fa:	2b 97       	sbiw	r28, 0x0b	; 11
 3fc:	0f b6       	in	r0, 0x3f	; 63
 3fe:	f8 94       	cli
 400:	de bf       	out	0x3e, r29	; 62
 402:	0f be       	out	0x3f, r0	; 63
 404:	cd bf       	out	0x3d, r28	; 61
 406:	e9 82       	std	Y+1, r14	; 0x01
 408:	fa 82       	std	Y+2, r15	; 0x02
 40a:	0b 83       	std	Y+3, r16	; 0x03
 40c:	1c 83       	std	Y+4, r17	; 0x04
 40e:	2d 83       	std	Y+5, r18	; 0x05
 410:	3e 83       	std	Y+6, r19	; 0x06
 412:	4f 83       	std	Y+7, r20	; 0x07
 414:	58 87       	std	Y+8, r21	; 0x08
 416:	69 87       	std	Y+9, r22	; 0x09
 418:	7a 87       	std	Y+10, r23	; 0x0a
 41a:	8b 87       	std	Y+11, r24	; 0x0b
	printf("[%03X:%d:", dataFrame.id,dataFrame.length);
 41c:	e0 2e       	mov	r14, r16
 41e:	f1 2c       	mov	r15, r1
 420:	1f 92       	push	r1
 422:	0f 93       	push	r16
 424:	8a 81       	ldd	r24, Y+2	; 0x02
 426:	8f 93       	push	r24
 428:	89 81       	ldd	r24, Y+1	; 0x01
 42a:	8f 93       	push	r24
 42c:	86 e0       	ldi	r24, 0x06	; 6
 42e:	91 e0       	ldi	r25, 0x01	; 1
 430:	9f 93       	push	r25
 432:	8f 93       	push	r24
 434:	d2 d0       	rcall	.+420    	; 0x5da <printf>
	
	for(int i = 0; i < dataFrame.length; i++)
 436:	0f 90       	pop	r0
 438:	0f 90       	pop	r0
 43a:	0f 90       	pop	r0
 43c:	0f 90       	pop	r0
 43e:	0f 90       	pop	r0
 440:	0f 90       	pop	r0
 442:	1e 14       	cp	r1, r14
 444:	1f 04       	cpc	r1, r15
 446:	1c f5       	brge	.+70     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 448:	7e 01       	movw	r14, r28
 44a:	24 e0       	ldi	r18, 0x04	; 4
 44c:	e2 0e       	add	r14, r18
 44e:	f1 1c       	adc	r15, r1
 450:	ce 01       	movw	r24, r28
 452:	80 0f       	add	r24, r16
 454:	91 1d       	adc	r25, r1
 456:	fc 01       	movw	r30, r24
 458:	34 96       	adiw	r30, 0x04	; 4
 45a:	5f 01       	movw	r10, r30
 45c:	10 e0       	ldi	r17, 0x00	; 0
	{
		printf("%02X", dataFrame.data.u8[i]);
 45e:	0f 2e       	mov	r0, r31
 460:	f0 e1       	ldi	r31, 0x10	; 16
 462:	cf 2e       	mov	r12, r31
 464:	f1 e0       	ldi	r31, 0x01	; 1
 466:	df 2e       	mov	r13, r31
 468:	f0 2d       	mov	r31, r0
 46a:	f7 01       	movw	r30, r14
 46c:	81 91       	ld	r24, Z+
 46e:	7f 01       	movw	r14, r30
 470:	1f 92       	push	r1
 472:	8f 93       	push	r24
 474:	df 92       	push	r13
 476:	cf 92       	push	r12
		uart_tx_char(i);
 478:	b0 d0       	rcall	.+352    	; 0x5da <printf>
 47a:	81 2f       	mov	r24, r17
 47c:	5c d0       	rcall	.+184    	; 0x536 <uart_tx_char>
 47e:	1f 5f       	subi	r17, 0xFF	; 255

void transmit_can_to_serial(CanMessage_t dataFrame)
{
	printf("[%03X:%d:", dataFrame.id,dataFrame.length);
	
	for(int i = 0; i < dataFrame.length; i++)
 480:	0f 90       	pop	r0
 482:	0f 90       	pop	r0
 484:	0f 90       	pop	r0
 486:	0f 90       	pop	r0
 488:	ea 14       	cp	r14, r10
 48a:	fb 04       	cpc	r15, r11
	{
		printf("%02X", dataFrame.data.u8[i]);
		uart_tx_char(i);
	}
	
	printf("]\n");
 48c:	71 f7       	brne	.-36     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 48e:	85 e1       	ldi	r24, 0x15	; 21
 490:	91 e0       	ldi	r25, 0x01	; 1
 492:	b6 d0       	rcall	.+364    	; 0x600 <puts>
}
 494:	2b 96       	adiw	r28, 0x0b	; 11
 496:	0f b6       	in	r0, 0x3f	; 63
 498:	f8 94       	cli
 49a:	de bf       	out	0x3e, r29	; 62
 49c:	0f be       	out	0x3f, r0	; 63
 49e:	cd bf       	out	0x3d, r28	; 61
 4a0:	df 91       	pop	r29
 4a2:	cf 91       	pop	r28
 4a4:	1f 91       	pop	r17
 4a6:	0f 91       	pop	r16
 4a8:	ff 90       	pop	r15
 4aa:	ef 90       	pop	r14
 4ac:	df 90       	pop	r13
 4ae:	cf 90       	pop	r12
 4b0:	bf 90       	pop	r11
 4b2:	af 90       	pop	r10
 4b4:	08 95       	ret

000004b6 <main>:
void handling_error();
void transmit_can_to_serial(CanMessage_t dataFrame);

int main(void)
{
	DDRB |= (1<<LED_RED) | (1<<LED_GREEN) | (1<<LED_BLUE);
 4b6:	84 b1       	in	r24, 0x04	; 4
 4b8:	80 6e       	ori	r24, 0xE0	; 224
 4ba:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<LED_BLUE) | (1<<LED_GREEN);
 4bc:	85 b1       	in	r24, 0x05	; 5
 4be:	80 6c       	ori	r24, 0xC0	; 192
 4c0:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1<<LED_RED);
	
	uart_init();
 4c2:	2d 98       	cbi	0x05, 5	; 5
	can_init(0,0);
 4c4:	2b d0       	rcall	.+86     	; 0x51c <uart_init>
 4c6:	60 e0       	ldi	r22, 0x00	; 0
 4c8:	70 e0       	ldi	r23, 0x00	; 0
 4ca:	80 e0       	ldi	r24, 0x00	; 0
 4cc:	90 e0       	ldi	r25, 0x00	; 0
	fdevopen(uart_tx_char, NULL); 
 4ce:	f1 de       	rcall	.-542    	; 0x2b2 <can_init>
 4d0:	60 e0       	ldi	r22, 0x00	; 0
 4d2:	70 e0       	ldi	r23, 0x00	; 0
 4d4:	8b e9       	ldi	r24, 0x9B	; 155
	//fdevopen will give a warning because it's expecting uart_tx_char to be of type int. 
	//This is because uart_tx_char, in uart.c, is declared as void. 
	
    while(1)
    {
		if (can_read_message_if_new(&rxFrame))
 4d6:	92 e0       	ldi	r25, 0x02	; 2
 4d8:	36 d0       	rcall	.+108    	; 0x546 <fdevopen>
 4da:	8e e8       	ldi	r24, 0x8E	; 142
 4dc:	92 e0       	ldi	r25, 0x02	; 2
 4de:	3e df       	rcall	.-388    	; 0x35c <can_read_message_if_new>
 4e0:	88 23       	and	r24, r24
		{
			transmit_can_to_serial(rxFrame);
 4e2:	c1 f0       	breq	.+48     	; 0x514 <main+0x5e>
 4e4:	e0 90 8e 02 	lds	r14, 0x028E	; 0x80028e <rxFrame>
 4e8:	f0 90 8f 02 	lds	r15, 0x028F	; 0x80028f <rxFrame+0x1>
 4ec:	00 91 90 02 	lds	r16, 0x0290	; 0x800290 <rxFrame+0x2>
 4f0:	10 91 91 02 	lds	r17, 0x0291	; 0x800291 <rxFrame+0x3>
 4f4:	20 91 92 02 	lds	r18, 0x0292	; 0x800292 <rxFrame+0x4>
 4f8:	30 91 93 02 	lds	r19, 0x0293	; 0x800293 <rxFrame+0x5>
 4fc:	40 91 94 02 	lds	r20, 0x0294	; 0x800294 <rxFrame+0x6>
 500:	50 91 95 02 	lds	r21, 0x0295	; 0x800295 <rxFrame+0x7>
 504:	60 91 96 02 	lds	r22, 0x0296	; 0x800296 <rxFrame+0x8>
 508:	70 91 97 02 	lds	r23, 0x0297	; 0x800297 <rxFrame+0x9>
 50c:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <rxFrame+0xa>
		}
		
		else {printf("No new can-data \n");}
 510:	68 df       	rcall	.-304    	; 0x3e2 <transmit_can_to_serial>
 512:	e3 cf       	rjmp	.-58     	; 0x4da <main+0x24>
 514:	87 e1       	ldi	r24, 0x17	; 23
 516:	91 e0       	ldi	r25, 0x01	; 1
 518:	73 d0       	rcall	.+230    	; 0x600 <puts>
 51a:	df cf       	rjmp	.-66     	; 0x4da <main+0x24>

0000051c <uart_init>:
#include <stdint.h>

void uart_init()
{
	const uint32_t baud_rate = 500000;
	UBRR1 = (F_CPU / 16) / baud_rate - 1;
 51c:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 520:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	UCSR1C = (3 << UCSZ0);	// 8 bit transfer
 524:	86 e0       	ldi	r24, 0x06	; 6
 526:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
	UCSR1B |= (1 << TXEN1); // Enable transmit only
 52a:	e9 ec       	ldi	r30, 0xC9	; 201
 52c:	f0 e0       	ldi	r31, 0x00	; 0
 52e:	80 81       	ld	r24, Z
 530:	88 60       	ori	r24, 0x08	; 8
 532:	80 83       	st	Z, r24
 534:	08 95       	ret

00000536 <uart_tx_char>:
}

void uart_tx_char(char c)
{
	while (!(UCSR1A & (1 << UDRE1))) { }; // Wait until data register is empty
 536:	e8 ec       	ldi	r30, 0xC8	; 200
 538:	f0 e0       	ldi	r31, 0x00	; 0
 53a:	90 81       	ld	r25, Z
 53c:	95 ff       	sbrs	r25, 5
 53e:	fd cf       	rjmp	.-6      	; 0x53a <uart_tx_char+0x4>
	UDR1 = c;
 540:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 544:	08 95       	ret

00000546 <fdevopen>:
 546:	0f 93       	push	r16
 548:	1f 93       	push	r17
 54a:	cf 93       	push	r28
 54c:	df 93       	push	r29
 54e:	00 97       	sbiw	r24, 0x00	; 0
 550:	31 f4       	brne	.+12     	; 0x55e <fdevopen+0x18>
 552:	61 15       	cp	r22, r1
 554:	71 05       	cpc	r23, r1
 556:	19 f4       	brne	.+6      	; 0x55e <fdevopen+0x18>
 558:	80 e0       	ldi	r24, 0x00	; 0
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	39 c0       	rjmp	.+114    	; 0x5d0 <fdevopen+0x8a>
 55e:	8b 01       	movw	r16, r22
 560:	ec 01       	movw	r28, r24
 562:	6e e0       	ldi	r22, 0x0E	; 14
 564:	70 e0       	ldi	r23, 0x00	; 0
 566:	81 e0       	ldi	r24, 0x01	; 1
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	77 d2       	rcall	.+1262   	; 0xa5a <calloc>
 56c:	fc 01       	movw	r30, r24
 56e:	89 2b       	or	r24, r25
 570:	99 f3       	breq	.-26     	; 0x558 <fdevopen+0x12>
 572:	80 e8       	ldi	r24, 0x80	; 128
 574:	83 83       	std	Z+3, r24	; 0x03
 576:	01 15       	cp	r16, r1
 578:	11 05       	cpc	r17, r1
 57a:	71 f0       	breq	.+28     	; 0x598 <fdevopen+0x52>
 57c:	13 87       	std	Z+11, r17	; 0x0b
 57e:	02 87       	std	Z+10, r16	; 0x0a
 580:	81 e8       	ldi	r24, 0x81	; 129
 582:	83 83       	std	Z+3, r24	; 0x03
 584:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <__iob>
 588:	90 91 a5 02 	lds	r25, 0x02A5	; 0x8002a5 <__iob+0x1>
 58c:	89 2b       	or	r24, r25
 58e:	21 f4       	brne	.+8      	; 0x598 <fdevopen+0x52>
 590:	f0 93 a5 02 	sts	0x02A5, r31	; 0x8002a5 <__iob+0x1>
 594:	e0 93 a4 02 	sts	0x02A4, r30	; 0x8002a4 <__iob>
 598:	20 97       	sbiw	r28, 0x00	; 0
 59a:	c9 f0       	breq	.+50     	; 0x5ce <fdevopen+0x88>
 59c:	d1 87       	std	Z+9, r29	; 0x09
 59e:	c0 87       	std	Z+8, r28	; 0x08
 5a0:	83 81       	ldd	r24, Z+3	; 0x03
 5a2:	82 60       	ori	r24, 0x02	; 2
 5a4:	83 83       	std	Z+3, r24	; 0x03
 5a6:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <__iob+0x2>
 5aa:	90 91 a7 02 	lds	r25, 0x02A7	; 0x8002a7 <__iob+0x3>
 5ae:	89 2b       	or	r24, r25
 5b0:	71 f4       	brne	.+28     	; 0x5ce <fdevopen+0x88>
 5b2:	f0 93 a7 02 	sts	0x02A7, r31	; 0x8002a7 <__iob+0x3>
 5b6:	e0 93 a6 02 	sts	0x02A6, r30	; 0x8002a6 <__iob+0x2>
 5ba:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <__iob+0x4>
 5be:	90 91 a9 02 	lds	r25, 0x02A9	; 0x8002a9 <__iob+0x5>
 5c2:	89 2b       	or	r24, r25
 5c4:	21 f4       	brne	.+8      	; 0x5ce <fdevopen+0x88>
 5c6:	f0 93 a9 02 	sts	0x02A9, r31	; 0x8002a9 <__iob+0x5>
 5ca:	e0 93 a8 02 	sts	0x02A8, r30	; 0x8002a8 <__iob+0x4>
 5ce:	cf 01       	movw	r24, r30
 5d0:	df 91       	pop	r29
 5d2:	cf 91       	pop	r28
 5d4:	1f 91       	pop	r17
 5d6:	0f 91       	pop	r16
 5d8:	08 95       	ret

000005da <printf>:
 5da:	cf 93       	push	r28
 5dc:	df 93       	push	r29
 5de:	cd b7       	in	r28, 0x3d	; 61
 5e0:	de b7       	in	r29, 0x3e	; 62
 5e2:	ae 01       	movw	r20, r28
 5e4:	4b 5f       	subi	r20, 0xFB	; 251
 5e6:	5f 4f       	sbci	r21, 0xFF	; 255
 5e8:	fa 01       	movw	r30, r20
 5ea:	61 91       	ld	r22, Z+
 5ec:	71 91       	ld	r23, Z+
 5ee:	af 01       	movw	r20, r30
 5f0:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <__iob+0x2>
 5f4:	90 91 a7 02 	lds	r25, 0x02A7	; 0x8002a7 <__iob+0x3>
 5f8:	33 d0       	rcall	.+102    	; 0x660 <vfprintf>
 5fa:	df 91       	pop	r29
 5fc:	cf 91       	pop	r28
 5fe:	08 95       	ret

00000600 <puts>:
 600:	0f 93       	push	r16
 602:	1f 93       	push	r17
 604:	cf 93       	push	r28
 606:	df 93       	push	r29
 608:	e0 91 a6 02 	lds	r30, 0x02A6	; 0x8002a6 <__iob+0x2>
 60c:	f0 91 a7 02 	lds	r31, 0x02A7	; 0x8002a7 <__iob+0x3>
 610:	23 81       	ldd	r18, Z+3	; 0x03
 612:	21 ff       	sbrs	r18, 1
 614:	1b c0       	rjmp	.+54     	; 0x64c <puts+0x4c>
 616:	8c 01       	movw	r16, r24
 618:	d0 e0       	ldi	r29, 0x00	; 0
 61a:	c0 e0       	ldi	r28, 0x00	; 0
 61c:	f8 01       	movw	r30, r16
 61e:	81 91       	ld	r24, Z+
 620:	8f 01       	movw	r16, r30
 622:	60 91 a6 02 	lds	r22, 0x02A6	; 0x8002a6 <__iob+0x2>
 626:	70 91 a7 02 	lds	r23, 0x02A7	; 0x8002a7 <__iob+0x3>
 62a:	db 01       	movw	r26, r22
 62c:	18 96       	adiw	r26, 0x08	; 8
 62e:	ed 91       	ld	r30, X+
 630:	fc 91       	ld	r31, X
 632:	19 97       	sbiw	r26, 0x09	; 9
 634:	88 23       	and	r24, r24
 636:	31 f0       	breq	.+12     	; 0x644 <puts+0x44>
 638:	09 95       	icall
 63a:	89 2b       	or	r24, r25
 63c:	79 f3       	breq	.-34     	; 0x61c <puts+0x1c>
 63e:	df ef       	ldi	r29, 0xFF	; 255
 640:	cf ef       	ldi	r28, 0xFF	; 255
 642:	ec cf       	rjmp	.-40     	; 0x61c <puts+0x1c>
 644:	8a e0       	ldi	r24, 0x0A	; 10
 646:	09 95       	icall
 648:	89 2b       	or	r24, r25
 64a:	19 f0       	breq	.+6      	; 0x652 <puts+0x52>
 64c:	8f ef       	ldi	r24, 0xFF	; 255
 64e:	9f ef       	ldi	r25, 0xFF	; 255
 650:	02 c0       	rjmp	.+4      	; 0x656 <puts+0x56>
 652:	8d 2f       	mov	r24, r29
 654:	9c 2f       	mov	r25, r28
 656:	df 91       	pop	r29
 658:	cf 91       	pop	r28
 65a:	1f 91       	pop	r17
 65c:	0f 91       	pop	r16
 65e:	08 95       	ret

00000660 <vfprintf>:
 660:	2f 92       	push	r2
 662:	3f 92       	push	r3
 664:	4f 92       	push	r4
 666:	5f 92       	push	r5
 668:	6f 92       	push	r6
 66a:	7f 92       	push	r7
 66c:	8f 92       	push	r8
 66e:	9f 92       	push	r9
 670:	af 92       	push	r10
 672:	bf 92       	push	r11
 674:	cf 92       	push	r12
 676:	df 92       	push	r13
 678:	ef 92       	push	r14
 67a:	ff 92       	push	r15
 67c:	0f 93       	push	r16
 67e:	1f 93       	push	r17
 680:	cf 93       	push	r28
 682:	df 93       	push	r29
 684:	cd b7       	in	r28, 0x3d	; 61
 686:	de b7       	in	r29, 0x3e	; 62
 688:	2b 97       	sbiw	r28, 0x0b	; 11
 68a:	0f b6       	in	r0, 0x3f	; 63
 68c:	f8 94       	cli
 68e:	de bf       	out	0x3e, r29	; 62
 690:	0f be       	out	0x3f, r0	; 63
 692:	cd bf       	out	0x3d, r28	; 61
 694:	6c 01       	movw	r12, r24
 696:	7b 01       	movw	r14, r22
 698:	8a 01       	movw	r16, r20
 69a:	fc 01       	movw	r30, r24
 69c:	17 82       	std	Z+7, r1	; 0x07
 69e:	16 82       	std	Z+6, r1	; 0x06
 6a0:	83 81       	ldd	r24, Z+3	; 0x03
 6a2:	81 ff       	sbrs	r24, 1
 6a4:	bf c1       	rjmp	.+894    	; 0xa24 <vfprintf+0x3c4>
 6a6:	ce 01       	movw	r24, r28
 6a8:	01 96       	adiw	r24, 0x01	; 1
 6aa:	3c 01       	movw	r6, r24
 6ac:	f6 01       	movw	r30, r12
 6ae:	93 81       	ldd	r25, Z+3	; 0x03
 6b0:	f7 01       	movw	r30, r14
 6b2:	93 fd       	sbrc	r25, 3
 6b4:	85 91       	lpm	r24, Z+
 6b6:	93 ff       	sbrs	r25, 3
 6b8:	81 91       	ld	r24, Z+
 6ba:	7f 01       	movw	r14, r30
 6bc:	88 23       	and	r24, r24
 6be:	09 f4       	brne	.+2      	; 0x6c2 <vfprintf+0x62>
 6c0:	ad c1       	rjmp	.+858    	; 0xa1c <vfprintf+0x3bc>
 6c2:	85 32       	cpi	r24, 0x25	; 37
 6c4:	39 f4       	brne	.+14     	; 0x6d4 <vfprintf+0x74>
 6c6:	93 fd       	sbrc	r25, 3
 6c8:	85 91       	lpm	r24, Z+
 6ca:	93 ff       	sbrs	r25, 3
 6cc:	81 91       	ld	r24, Z+
 6ce:	7f 01       	movw	r14, r30
 6d0:	85 32       	cpi	r24, 0x25	; 37
 6d2:	21 f4       	brne	.+8      	; 0x6dc <vfprintf+0x7c>
 6d4:	b6 01       	movw	r22, r12
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	18 d3       	rcall	.+1584   	; 0xd0a <fputc>
 6da:	e8 cf       	rjmp	.-48     	; 0x6ac <vfprintf+0x4c>
 6dc:	91 2c       	mov	r9, r1
 6de:	21 2c       	mov	r2, r1
 6e0:	31 2c       	mov	r3, r1
 6e2:	ff e1       	ldi	r31, 0x1F	; 31
 6e4:	f3 15       	cp	r31, r3
 6e6:	d8 f0       	brcs	.+54     	; 0x71e <vfprintf+0xbe>
 6e8:	8b 32       	cpi	r24, 0x2B	; 43
 6ea:	79 f0       	breq	.+30     	; 0x70a <vfprintf+0xaa>
 6ec:	38 f4       	brcc	.+14     	; 0x6fc <vfprintf+0x9c>
 6ee:	80 32       	cpi	r24, 0x20	; 32
 6f0:	79 f0       	breq	.+30     	; 0x710 <vfprintf+0xb0>
 6f2:	83 32       	cpi	r24, 0x23	; 35
 6f4:	a1 f4       	brne	.+40     	; 0x71e <vfprintf+0xbe>
 6f6:	23 2d       	mov	r18, r3
 6f8:	20 61       	ori	r18, 0x10	; 16
 6fa:	1d c0       	rjmp	.+58     	; 0x736 <vfprintf+0xd6>
 6fc:	8d 32       	cpi	r24, 0x2D	; 45
 6fe:	61 f0       	breq	.+24     	; 0x718 <vfprintf+0xb8>
 700:	80 33       	cpi	r24, 0x30	; 48
 702:	69 f4       	brne	.+26     	; 0x71e <vfprintf+0xbe>
 704:	23 2d       	mov	r18, r3
 706:	21 60       	ori	r18, 0x01	; 1
 708:	16 c0       	rjmp	.+44     	; 0x736 <vfprintf+0xd6>
 70a:	83 2d       	mov	r24, r3
 70c:	82 60       	ori	r24, 0x02	; 2
 70e:	38 2e       	mov	r3, r24
 710:	e3 2d       	mov	r30, r3
 712:	e4 60       	ori	r30, 0x04	; 4
 714:	3e 2e       	mov	r3, r30
 716:	2a c0       	rjmp	.+84     	; 0x76c <vfprintf+0x10c>
 718:	f3 2d       	mov	r31, r3
 71a:	f8 60       	ori	r31, 0x08	; 8
 71c:	1d c0       	rjmp	.+58     	; 0x758 <vfprintf+0xf8>
 71e:	37 fc       	sbrc	r3, 7
 720:	2d c0       	rjmp	.+90     	; 0x77c <vfprintf+0x11c>
 722:	20 ed       	ldi	r18, 0xD0	; 208
 724:	28 0f       	add	r18, r24
 726:	2a 30       	cpi	r18, 0x0A	; 10
 728:	40 f0       	brcs	.+16     	; 0x73a <vfprintf+0xda>
 72a:	8e 32       	cpi	r24, 0x2E	; 46
 72c:	b9 f4       	brne	.+46     	; 0x75c <vfprintf+0xfc>
 72e:	36 fc       	sbrc	r3, 6
 730:	75 c1       	rjmp	.+746    	; 0xa1c <vfprintf+0x3bc>
 732:	23 2d       	mov	r18, r3
 734:	20 64       	ori	r18, 0x40	; 64
 736:	32 2e       	mov	r3, r18
 738:	19 c0       	rjmp	.+50     	; 0x76c <vfprintf+0x10c>
 73a:	36 fe       	sbrs	r3, 6
 73c:	06 c0       	rjmp	.+12     	; 0x74a <vfprintf+0xea>
 73e:	8a e0       	ldi	r24, 0x0A	; 10
 740:	98 9e       	mul	r9, r24
 742:	20 0d       	add	r18, r0
 744:	11 24       	eor	r1, r1
 746:	92 2e       	mov	r9, r18
 748:	11 c0       	rjmp	.+34     	; 0x76c <vfprintf+0x10c>
 74a:	ea e0       	ldi	r30, 0x0A	; 10
 74c:	2e 9e       	mul	r2, r30
 74e:	20 0d       	add	r18, r0
 750:	11 24       	eor	r1, r1
 752:	22 2e       	mov	r2, r18
 754:	f3 2d       	mov	r31, r3
 756:	f0 62       	ori	r31, 0x20	; 32
 758:	3f 2e       	mov	r3, r31
 75a:	08 c0       	rjmp	.+16     	; 0x76c <vfprintf+0x10c>
 75c:	8c 36       	cpi	r24, 0x6C	; 108
 75e:	21 f4       	brne	.+8      	; 0x768 <vfprintf+0x108>
 760:	83 2d       	mov	r24, r3
 762:	80 68       	ori	r24, 0x80	; 128
 764:	38 2e       	mov	r3, r24
 766:	02 c0       	rjmp	.+4      	; 0x76c <vfprintf+0x10c>
 768:	88 36       	cpi	r24, 0x68	; 104
 76a:	41 f4       	brne	.+16     	; 0x77c <vfprintf+0x11c>
 76c:	f7 01       	movw	r30, r14
 76e:	93 fd       	sbrc	r25, 3
 770:	85 91       	lpm	r24, Z+
 772:	93 ff       	sbrs	r25, 3
 774:	81 91       	ld	r24, Z+
 776:	7f 01       	movw	r14, r30
 778:	81 11       	cpse	r24, r1
 77a:	b3 cf       	rjmp	.-154    	; 0x6e2 <vfprintf+0x82>
 77c:	98 2f       	mov	r25, r24
 77e:	9f 7d       	andi	r25, 0xDF	; 223
 780:	95 54       	subi	r25, 0x45	; 69
 782:	93 30       	cpi	r25, 0x03	; 3
 784:	28 f4       	brcc	.+10     	; 0x790 <vfprintf+0x130>
 786:	0c 5f       	subi	r16, 0xFC	; 252
 788:	1f 4f       	sbci	r17, 0xFF	; 255
 78a:	9f e3       	ldi	r25, 0x3F	; 63
 78c:	99 83       	std	Y+1, r25	; 0x01
 78e:	0d c0       	rjmp	.+26     	; 0x7aa <vfprintf+0x14a>
 790:	83 36       	cpi	r24, 0x63	; 99
 792:	31 f0       	breq	.+12     	; 0x7a0 <vfprintf+0x140>
 794:	83 37       	cpi	r24, 0x73	; 115
 796:	71 f0       	breq	.+28     	; 0x7b4 <vfprintf+0x154>
 798:	83 35       	cpi	r24, 0x53	; 83
 79a:	09 f0       	breq	.+2      	; 0x79e <vfprintf+0x13e>
 79c:	55 c0       	rjmp	.+170    	; 0x848 <vfprintf+0x1e8>
 79e:	20 c0       	rjmp	.+64     	; 0x7e0 <vfprintf+0x180>
 7a0:	f8 01       	movw	r30, r16
 7a2:	80 81       	ld	r24, Z
 7a4:	89 83       	std	Y+1, r24	; 0x01
 7a6:	0e 5f       	subi	r16, 0xFE	; 254
 7a8:	1f 4f       	sbci	r17, 0xFF	; 255
 7aa:	88 24       	eor	r8, r8
 7ac:	83 94       	inc	r8
 7ae:	91 2c       	mov	r9, r1
 7b0:	53 01       	movw	r10, r6
 7b2:	12 c0       	rjmp	.+36     	; 0x7d8 <vfprintf+0x178>
 7b4:	28 01       	movw	r4, r16
 7b6:	f2 e0       	ldi	r31, 0x02	; 2
 7b8:	4f 0e       	add	r4, r31
 7ba:	51 1c       	adc	r5, r1
 7bc:	f8 01       	movw	r30, r16
 7be:	a0 80       	ld	r10, Z
 7c0:	b1 80       	ldd	r11, Z+1	; 0x01
 7c2:	36 fe       	sbrs	r3, 6
 7c4:	03 c0       	rjmp	.+6      	; 0x7cc <vfprintf+0x16c>
 7c6:	69 2d       	mov	r22, r9
 7c8:	70 e0       	ldi	r23, 0x00	; 0
 7ca:	02 c0       	rjmp	.+4      	; 0x7d0 <vfprintf+0x170>
 7cc:	6f ef       	ldi	r22, 0xFF	; 255
 7ce:	7f ef       	ldi	r23, 0xFF	; 255
 7d0:	c5 01       	movw	r24, r10
 7d2:	90 d2       	rcall	.+1312   	; 0xcf4 <strnlen>
 7d4:	4c 01       	movw	r8, r24
 7d6:	82 01       	movw	r16, r4
 7d8:	f3 2d       	mov	r31, r3
 7da:	ff 77       	andi	r31, 0x7F	; 127
 7dc:	3f 2e       	mov	r3, r31
 7de:	15 c0       	rjmp	.+42     	; 0x80a <vfprintf+0x1aa>
 7e0:	28 01       	movw	r4, r16
 7e2:	22 e0       	ldi	r18, 0x02	; 2
 7e4:	42 0e       	add	r4, r18
 7e6:	51 1c       	adc	r5, r1
 7e8:	f8 01       	movw	r30, r16
 7ea:	a0 80       	ld	r10, Z
 7ec:	b1 80       	ldd	r11, Z+1	; 0x01
 7ee:	36 fe       	sbrs	r3, 6
 7f0:	03 c0       	rjmp	.+6      	; 0x7f8 <vfprintf+0x198>
 7f2:	69 2d       	mov	r22, r9
 7f4:	70 e0       	ldi	r23, 0x00	; 0
 7f6:	02 c0       	rjmp	.+4      	; 0x7fc <vfprintf+0x19c>
 7f8:	6f ef       	ldi	r22, 0xFF	; 255
 7fa:	7f ef       	ldi	r23, 0xFF	; 255
 7fc:	c5 01       	movw	r24, r10
 7fe:	68 d2       	rcall	.+1232   	; 0xcd0 <strnlen_P>
 800:	4c 01       	movw	r8, r24
 802:	f3 2d       	mov	r31, r3
 804:	f0 68       	ori	r31, 0x80	; 128
 806:	3f 2e       	mov	r3, r31
 808:	82 01       	movw	r16, r4
 80a:	33 fc       	sbrc	r3, 3
 80c:	19 c0       	rjmp	.+50     	; 0x840 <vfprintf+0x1e0>
 80e:	82 2d       	mov	r24, r2
 810:	90 e0       	ldi	r25, 0x00	; 0
 812:	88 16       	cp	r8, r24
 814:	99 06       	cpc	r9, r25
 816:	a0 f4       	brcc	.+40     	; 0x840 <vfprintf+0x1e0>
 818:	b6 01       	movw	r22, r12
 81a:	80 e2       	ldi	r24, 0x20	; 32
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	75 d2       	rcall	.+1258   	; 0xd0a <fputc>
 820:	2a 94       	dec	r2
 822:	f5 cf       	rjmp	.-22     	; 0x80e <vfprintf+0x1ae>
 824:	f5 01       	movw	r30, r10
 826:	37 fc       	sbrc	r3, 7
 828:	85 91       	lpm	r24, Z+
 82a:	37 fe       	sbrs	r3, 7
 82c:	81 91       	ld	r24, Z+
 82e:	5f 01       	movw	r10, r30
 830:	b6 01       	movw	r22, r12
 832:	90 e0       	ldi	r25, 0x00	; 0
 834:	6a d2       	rcall	.+1236   	; 0xd0a <fputc>
 836:	21 10       	cpse	r2, r1
 838:	2a 94       	dec	r2
 83a:	21 e0       	ldi	r18, 0x01	; 1
 83c:	82 1a       	sub	r8, r18
 83e:	91 08       	sbc	r9, r1
 840:	81 14       	cp	r8, r1
 842:	91 04       	cpc	r9, r1
 844:	79 f7       	brne	.-34     	; 0x824 <vfprintf+0x1c4>
 846:	e1 c0       	rjmp	.+450    	; 0xa0a <vfprintf+0x3aa>
 848:	84 36       	cpi	r24, 0x64	; 100
 84a:	11 f0       	breq	.+4      	; 0x850 <vfprintf+0x1f0>
 84c:	89 36       	cpi	r24, 0x69	; 105
 84e:	39 f5       	brne	.+78     	; 0x89e <vfprintf+0x23e>
 850:	f8 01       	movw	r30, r16
 852:	37 fe       	sbrs	r3, 7
 854:	07 c0       	rjmp	.+14     	; 0x864 <vfprintf+0x204>
 856:	60 81       	ld	r22, Z
 858:	71 81       	ldd	r23, Z+1	; 0x01
 85a:	82 81       	ldd	r24, Z+2	; 0x02
 85c:	93 81       	ldd	r25, Z+3	; 0x03
 85e:	0c 5f       	subi	r16, 0xFC	; 252
 860:	1f 4f       	sbci	r17, 0xFF	; 255
 862:	08 c0       	rjmp	.+16     	; 0x874 <vfprintf+0x214>
 864:	60 81       	ld	r22, Z
 866:	71 81       	ldd	r23, Z+1	; 0x01
 868:	07 2e       	mov	r0, r23
 86a:	00 0c       	add	r0, r0
 86c:	88 0b       	sbc	r24, r24
 86e:	99 0b       	sbc	r25, r25
 870:	0e 5f       	subi	r16, 0xFE	; 254
 872:	1f 4f       	sbci	r17, 0xFF	; 255
 874:	f3 2d       	mov	r31, r3
 876:	ff 76       	andi	r31, 0x6F	; 111
 878:	3f 2e       	mov	r3, r31
 87a:	97 ff       	sbrs	r25, 7
 87c:	09 c0       	rjmp	.+18     	; 0x890 <vfprintf+0x230>
 87e:	90 95       	com	r25
 880:	80 95       	com	r24
 882:	70 95       	com	r23
 884:	61 95       	neg	r22
 886:	7f 4f       	sbci	r23, 0xFF	; 255
 888:	8f 4f       	sbci	r24, 0xFF	; 255
 88a:	9f 4f       	sbci	r25, 0xFF	; 255
 88c:	f0 68       	ori	r31, 0x80	; 128
 88e:	3f 2e       	mov	r3, r31
 890:	2a e0       	ldi	r18, 0x0A	; 10
 892:	30 e0       	ldi	r19, 0x00	; 0
 894:	a3 01       	movw	r20, r6
 896:	75 d2       	rcall	.+1258   	; 0xd82 <__ultoa_invert>
 898:	88 2e       	mov	r8, r24
 89a:	86 18       	sub	r8, r6
 89c:	44 c0       	rjmp	.+136    	; 0x926 <vfprintf+0x2c6>
 89e:	85 37       	cpi	r24, 0x75	; 117
 8a0:	31 f4       	brne	.+12     	; 0x8ae <vfprintf+0x24e>
 8a2:	23 2d       	mov	r18, r3
 8a4:	2f 7e       	andi	r18, 0xEF	; 239
 8a6:	b2 2e       	mov	r11, r18
 8a8:	2a e0       	ldi	r18, 0x0A	; 10
 8aa:	30 e0       	ldi	r19, 0x00	; 0
 8ac:	25 c0       	rjmp	.+74     	; 0x8f8 <vfprintf+0x298>
 8ae:	93 2d       	mov	r25, r3
 8b0:	99 7f       	andi	r25, 0xF9	; 249
 8b2:	b9 2e       	mov	r11, r25
 8b4:	8f 36       	cpi	r24, 0x6F	; 111
 8b6:	c1 f0       	breq	.+48     	; 0x8e8 <vfprintf+0x288>
 8b8:	18 f4       	brcc	.+6      	; 0x8c0 <vfprintf+0x260>
 8ba:	88 35       	cpi	r24, 0x58	; 88
 8bc:	79 f0       	breq	.+30     	; 0x8dc <vfprintf+0x27c>
 8be:	ae c0       	rjmp	.+348    	; 0xa1c <vfprintf+0x3bc>
 8c0:	80 37       	cpi	r24, 0x70	; 112
 8c2:	19 f0       	breq	.+6      	; 0x8ca <vfprintf+0x26a>
 8c4:	88 37       	cpi	r24, 0x78	; 120
 8c6:	21 f0       	breq	.+8      	; 0x8d0 <vfprintf+0x270>
 8c8:	a9 c0       	rjmp	.+338    	; 0xa1c <vfprintf+0x3bc>
 8ca:	e9 2f       	mov	r30, r25
 8cc:	e0 61       	ori	r30, 0x10	; 16
 8ce:	be 2e       	mov	r11, r30
 8d0:	b4 fe       	sbrs	r11, 4
 8d2:	0d c0       	rjmp	.+26     	; 0x8ee <vfprintf+0x28e>
 8d4:	fb 2d       	mov	r31, r11
 8d6:	f4 60       	ori	r31, 0x04	; 4
 8d8:	bf 2e       	mov	r11, r31
 8da:	09 c0       	rjmp	.+18     	; 0x8ee <vfprintf+0x28e>
 8dc:	34 fe       	sbrs	r3, 4
 8de:	0a c0       	rjmp	.+20     	; 0x8f4 <vfprintf+0x294>
 8e0:	29 2f       	mov	r18, r25
 8e2:	26 60       	ori	r18, 0x06	; 6
 8e4:	b2 2e       	mov	r11, r18
 8e6:	06 c0       	rjmp	.+12     	; 0x8f4 <vfprintf+0x294>
 8e8:	28 e0       	ldi	r18, 0x08	; 8
 8ea:	30 e0       	ldi	r19, 0x00	; 0
 8ec:	05 c0       	rjmp	.+10     	; 0x8f8 <vfprintf+0x298>
 8ee:	20 e1       	ldi	r18, 0x10	; 16
 8f0:	30 e0       	ldi	r19, 0x00	; 0
 8f2:	02 c0       	rjmp	.+4      	; 0x8f8 <vfprintf+0x298>
 8f4:	20 e1       	ldi	r18, 0x10	; 16
 8f6:	32 e0       	ldi	r19, 0x02	; 2
 8f8:	f8 01       	movw	r30, r16
 8fa:	b7 fe       	sbrs	r11, 7
 8fc:	07 c0       	rjmp	.+14     	; 0x90c <vfprintf+0x2ac>
 8fe:	60 81       	ld	r22, Z
 900:	71 81       	ldd	r23, Z+1	; 0x01
 902:	82 81       	ldd	r24, Z+2	; 0x02
 904:	93 81       	ldd	r25, Z+3	; 0x03
 906:	0c 5f       	subi	r16, 0xFC	; 252
 908:	1f 4f       	sbci	r17, 0xFF	; 255
 90a:	06 c0       	rjmp	.+12     	; 0x918 <vfprintf+0x2b8>
 90c:	60 81       	ld	r22, Z
 90e:	71 81       	ldd	r23, Z+1	; 0x01
 910:	80 e0       	ldi	r24, 0x00	; 0
 912:	90 e0       	ldi	r25, 0x00	; 0
 914:	0e 5f       	subi	r16, 0xFE	; 254
 916:	1f 4f       	sbci	r17, 0xFF	; 255
 918:	a3 01       	movw	r20, r6
 91a:	33 d2       	rcall	.+1126   	; 0xd82 <__ultoa_invert>
 91c:	88 2e       	mov	r8, r24
 91e:	86 18       	sub	r8, r6
 920:	fb 2d       	mov	r31, r11
 922:	ff 77       	andi	r31, 0x7F	; 127
 924:	3f 2e       	mov	r3, r31
 926:	36 fe       	sbrs	r3, 6
 928:	0d c0       	rjmp	.+26     	; 0x944 <vfprintf+0x2e4>
 92a:	23 2d       	mov	r18, r3
 92c:	2e 7f       	andi	r18, 0xFE	; 254
 92e:	a2 2e       	mov	r10, r18
 930:	89 14       	cp	r8, r9
 932:	58 f4       	brcc	.+22     	; 0x94a <vfprintf+0x2ea>
 934:	34 fe       	sbrs	r3, 4
 936:	0b c0       	rjmp	.+22     	; 0x94e <vfprintf+0x2ee>
 938:	32 fc       	sbrc	r3, 2
 93a:	09 c0       	rjmp	.+18     	; 0x94e <vfprintf+0x2ee>
 93c:	83 2d       	mov	r24, r3
 93e:	8e 7e       	andi	r24, 0xEE	; 238
 940:	a8 2e       	mov	r10, r24
 942:	05 c0       	rjmp	.+10     	; 0x94e <vfprintf+0x2ee>
 944:	b8 2c       	mov	r11, r8
 946:	a3 2c       	mov	r10, r3
 948:	03 c0       	rjmp	.+6      	; 0x950 <vfprintf+0x2f0>
 94a:	b8 2c       	mov	r11, r8
 94c:	01 c0       	rjmp	.+2      	; 0x950 <vfprintf+0x2f0>
 94e:	b9 2c       	mov	r11, r9
 950:	a4 fe       	sbrs	r10, 4
 952:	0f c0       	rjmp	.+30     	; 0x972 <vfprintf+0x312>
 954:	fe 01       	movw	r30, r28
 956:	e8 0d       	add	r30, r8
 958:	f1 1d       	adc	r31, r1
 95a:	80 81       	ld	r24, Z
 95c:	80 33       	cpi	r24, 0x30	; 48
 95e:	21 f4       	brne	.+8      	; 0x968 <vfprintf+0x308>
 960:	9a 2d       	mov	r25, r10
 962:	99 7e       	andi	r25, 0xE9	; 233
 964:	a9 2e       	mov	r10, r25
 966:	09 c0       	rjmp	.+18     	; 0x97a <vfprintf+0x31a>
 968:	a2 fe       	sbrs	r10, 2
 96a:	06 c0       	rjmp	.+12     	; 0x978 <vfprintf+0x318>
 96c:	b3 94       	inc	r11
 96e:	b3 94       	inc	r11
 970:	04 c0       	rjmp	.+8      	; 0x97a <vfprintf+0x31a>
 972:	8a 2d       	mov	r24, r10
 974:	86 78       	andi	r24, 0x86	; 134
 976:	09 f0       	breq	.+2      	; 0x97a <vfprintf+0x31a>
 978:	b3 94       	inc	r11
 97a:	a3 fc       	sbrc	r10, 3
 97c:	10 c0       	rjmp	.+32     	; 0x99e <vfprintf+0x33e>
 97e:	a0 fe       	sbrs	r10, 0
 980:	06 c0       	rjmp	.+12     	; 0x98e <vfprintf+0x32e>
 982:	b2 14       	cp	r11, r2
 984:	80 f4       	brcc	.+32     	; 0x9a6 <vfprintf+0x346>
 986:	28 0c       	add	r2, r8
 988:	92 2c       	mov	r9, r2
 98a:	9b 18       	sub	r9, r11
 98c:	0d c0       	rjmp	.+26     	; 0x9a8 <vfprintf+0x348>
 98e:	b2 14       	cp	r11, r2
 990:	58 f4       	brcc	.+22     	; 0x9a8 <vfprintf+0x348>
 992:	b6 01       	movw	r22, r12
 994:	80 e2       	ldi	r24, 0x20	; 32
 996:	90 e0       	ldi	r25, 0x00	; 0
 998:	b8 d1       	rcall	.+880    	; 0xd0a <fputc>
 99a:	b3 94       	inc	r11
 99c:	f8 cf       	rjmp	.-16     	; 0x98e <vfprintf+0x32e>
 99e:	b2 14       	cp	r11, r2
 9a0:	18 f4       	brcc	.+6      	; 0x9a8 <vfprintf+0x348>
 9a2:	2b 18       	sub	r2, r11
 9a4:	02 c0       	rjmp	.+4      	; 0x9aa <vfprintf+0x34a>
 9a6:	98 2c       	mov	r9, r8
 9a8:	21 2c       	mov	r2, r1
 9aa:	a4 fe       	sbrs	r10, 4
 9ac:	0f c0       	rjmp	.+30     	; 0x9cc <vfprintf+0x36c>
 9ae:	b6 01       	movw	r22, r12
 9b0:	80 e3       	ldi	r24, 0x30	; 48
 9b2:	90 e0       	ldi	r25, 0x00	; 0
 9b4:	aa d1       	rcall	.+852    	; 0xd0a <fputc>
 9b6:	a2 fe       	sbrs	r10, 2
 9b8:	16 c0       	rjmp	.+44     	; 0x9e6 <vfprintf+0x386>
 9ba:	a1 fc       	sbrc	r10, 1
 9bc:	03 c0       	rjmp	.+6      	; 0x9c4 <vfprintf+0x364>
 9be:	88 e7       	ldi	r24, 0x78	; 120
 9c0:	90 e0       	ldi	r25, 0x00	; 0
 9c2:	02 c0       	rjmp	.+4      	; 0x9c8 <vfprintf+0x368>
 9c4:	88 e5       	ldi	r24, 0x58	; 88
 9c6:	90 e0       	ldi	r25, 0x00	; 0
 9c8:	b6 01       	movw	r22, r12
 9ca:	0c c0       	rjmp	.+24     	; 0x9e4 <vfprintf+0x384>
 9cc:	8a 2d       	mov	r24, r10
 9ce:	86 78       	andi	r24, 0x86	; 134
 9d0:	51 f0       	breq	.+20     	; 0x9e6 <vfprintf+0x386>
 9d2:	a1 fe       	sbrs	r10, 1
 9d4:	02 c0       	rjmp	.+4      	; 0x9da <vfprintf+0x37a>
 9d6:	8b e2       	ldi	r24, 0x2B	; 43
 9d8:	01 c0       	rjmp	.+2      	; 0x9dc <vfprintf+0x37c>
 9da:	80 e2       	ldi	r24, 0x20	; 32
 9dc:	a7 fc       	sbrc	r10, 7
 9de:	8d e2       	ldi	r24, 0x2D	; 45
 9e0:	b6 01       	movw	r22, r12
 9e2:	90 e0       	ldi	r25, 0x00	; 0
 9e4:	92 d1       	rcall	.+804    	; 0xd0a <fputc>
 9e6:	89 14       	cp	r8, r9
 9e8:	30 f4       	brcc	.+12     	; 0x9f6 <vfprintf+0x396>
 9ea:	b6 01       	movw	r22, r12
 9ec:	80 e3       	ldi	r24, 0x30	; 48
 9ee:	90 e0       	ldi	r25, 0x00	; 0
 9f0:	8c d1       	rcall	.+792    	; 0xd0a <fputc>
 9f2:	9a 94       	dec	r9
 9f4:	f8 cf       	rjmp	.-16     	; 0x9e6 <vfprintf+0x386>
 9f6:	8a 94       	dec	r8
 9f8:	f3 01       	movw	r30, r6
 9fa:	e8 0d       	add	r30, r8
 9fc:	f1 1d       	adc	r31, r1
 9fe:	80 81       	ld	r24, Z
 a00:	b6 01       	movw	r22, r12
 a02:	90 e0       	ldi	r25, 0x00	; 0
 a04:	82 d1       	rcall	.+772    	; 0xd0a <fputc>
 a06:	81 10       	cpse	r8, r1
 a08:	f6 cf       	rjmp	.-20     	; 0x9f6 <vfprintf+0x396>
 a0a:	22 20       	and	r2, r2
 a0c:	09 f4       	brne	.+2      	; 0xa10 <vfprintf+0x3b0>
 a0e:	4e ce       	rjmp	.-868    	; 0x6ac <vfprintf+0x4c>
 a10:	b6 01       	movw	r22, r12
 a12:	80 e2       	ldi	r24, 0x20	; 32
 a14:	90 e0       	ldi	r25, 0x00	; 0
 a16:	79 d1       	rcall	.+754    	; 0xd0a <fputc>
 a18:	2a 94       	dec	r2
 a1a:	f7 cf       	rjmp	.-18     	; 0xa0a <vfprintf+0x3aa>
 a1c:	f6 01       	movw	r30, r12
 a1e:	86 81       	ldd	r24, Z+6	; 0x06
 a20:	97 81       	ldd	r25, Z+7	; 0x07
 a22:	02 c0       	rjmp	.+4      	; 0xa28 <vfprintf+0x3c8>
 a24:	8f ef       	ldi	r24, 0xFF	; 255
 a26:	9f ef       	ldi	r25, 0xFF	; 255
 a28:	2b 96       	adiw	r28, 0x0b	; 11
 a2a:	0f b6       	in	r0, 0x3f	; 63
 a2c:	f8 94       	cli
 a2e:	de bf       	out	0x3e, r29	; 62
 a30:	0f be       	out	0x3f, r0	; 63
 a32:	cd bf       	out	0x3d, r28	; 61
 a34:	df 91       	pop	r29
 a36:	cf 91       	pop	r28
 a38:	1f 91       	pop	r17
 a3a:	0f 91       	pop	r16
 a3c:	ff 90       	pop	r15
 a3e:	ef 90       	pop	r14
 a40:	df 90       	pop	r13
 a42:	cf 90       	pop	r12
 a44:	bf 90       	pop	r11
 a46:	af 90       	pop	r10
 a48:	9f 90       	pop	r9
 a4a:	8f 90       	pop	r8
 a4c:	7f 90       	pop	r7
 a4e:	6f 90       	pop	r6
 a50:	5f 90       	pop	r5
 a52:	4f 90       	pop	r4
 a54:	3f 90       	pop	r3
 a56:	2f 90       	pop	r2
 a58:	08 95       	ret

00000a5a <calloc>:
 a5a:	0f 93       	push	r16
 a5c:	1f 93       	push	r17
 a5e:	cf 93       	push	r28
 a60:	df 93       	push	r29
 a62:	86 9f       	mul	r24, r22
 a64:	80 01       	movw	r16, r0
 a66:	87 9f       	mul	r24, r23
 a68:	10 0d       	add	r17, r0
 a6a:	96 9f       	mul	r25, r22
 a6c:	10 0d       	add	r17, r0
 a6e:	11 24       	eor	r1, r1
 a70:	c8 01       	movw	r24, r16
 a72:	0d d0       	rcall	.+26     	; 0xa8e <malloc>
 a74:	ec 01       	movw	r28, r24
 a76:	00 97       	sbiw	r24, 0x00	; 0
 a78:	21 f0       	breq	.+8      	; 0xa82 <calloc+0x28>
 a7a:	a8 01       	movw	r20, r16
 a7c:	60 e0       	ldi	r22, 0x00	; 0
 a7e:	70 e0       	ldi	r23, 0x00	; 0
 a80:	32 d1       	rcall	.+612    	; 0xce6 <memset>
 a82:	ce 01       	movw	r24, r28
 a84:	df 91       	pop	r29
 a86:	cf 91       	pop	r28
 a88:	1f 91       	pop	r17
 a8a:	0f 91       	pop	r16
 a8c:	08 95       	ret

00000a8e <malloc>:
 a8e:	0f 93       	push	r16
 a90:	1f 93       	push	r17
 a92:	cf 93       	push	r28
 a94:	df 93       	push	r29
 a96:	82 30       	cpi	r24, 0x02	; 2
 a98:	91 05       	cpc	r25, r1
 a9a:	10 f4       	brcc	.+4      	; 0xaa0 <malloc+0x12>
 a9c:	82 e0       	ldi	r24, 0x02	; 2
 a9e:	90 e0       	ldi	r25, 0x00	; 0
 aa0:	e0 91 ac 02 	lds	r30, 0x02AC	; 0x8002ac <__flp>
 aa4:	f0 91 ad 02 	lds	r31, 0x02AD	; 0x8002ad <__flp+0x1>
 aa8:	20 e0       	ldi	r18, 0x00	; 0
 aaa:	30 e0       	ldi	r19, 0x00	; 0
 aac:	a0 e0       	ldi	r26, 0x00	; 0
 aae:	b0 e0       	ldi	r27, 0x00	; 0
 ab0:	30 97       	sbiw	r30, 0x00	; 0
 ab2:	19 f1       	breq	.+70     	; 0xafa <malloc+0x6c>
 ab4:	40 81       	ld	r20, Z
 ab6:	51 81       	ldd	r21, Z+1	; 0x01
 ab8:	02 81       	ldd	r16, Z+2	; 0x02
 aba:	13 81       	ldd	r17, Z+3	; 0x03
 abc:	48 17       	cp	r20, r24
 abe:	59 07       	cpc	r21, r25
 ac0:	c8 f0       	brcs	.+50     	; 0xaf4 <malloc+0x66>
 ac2:	84 17       	cp	r24, r20
 ac4:	95 07       	cpc	r25, r21
 ac6:	69 f4       	brne	.+26     	; 0xae2 <malloc+0x54>
 ac8:	10 97       	sbiw	r26, 0x00	; 0
 aca:	31 f0       	breq	.+12     	; 0xad8 <malloc+0x4a>
 acc:	12 96       	adiw	r26, 0x02	; 2
 ace:	0c 93       	st	X, r16
 ad0:	12 97       	sbiw	r26, 0x02	; 2
 ad2:	13 96       	adiw	r26, 0x03	; 3
 ad4:	1c 93       	st	X, r17
 ad6:	27 c0       	rjmp	.+78     	; 0xb26 <malloc+0x98>
 ad8:	00 93 ac 02 	sts	0x02AC, r16	; 0x8002ac <__flp>
 adc:	10 93 ad 02 	sts	0x02AD, r17	; 0x8002ad <__flp+0x1>
 ae0:	22 c0       	rjmp	.+68     	; 0xb26 <malloc+0x98>
 ae2:	21 15       	cp	r18, r1
 ae4:	31 05       	cpc	r19, r1
 ae6:	19 f0       	breq	.+6      	; 0xaee <malloc+0x60>
 ae8:	42 17       	cp	r20, r18
 aea:	53 07       	cpc	r21, r19
 aec:	18 f4       	brcc	.+6      	; 0xaf4 <malloc+0x66>
 aee:	9a 01       	movw	r18, r20
 af0:	bd 01       	movw	r22, r26
 af2:	ef 01       	movw	r28, r30
 af4:	df 01       	movw	r26, r30
 af6:	f8 01       	movw	r30, r16
 af8:	db cf       	rjmp	.-74     	; 0xab0 <malloc+0x22>
 afa:	21 15       	cp	r18, r1
 afc:	31 05       	cpc	r19, r1
 afe:	f9 f0       	breq	.+62     	; 0xb3e <malloc+0xb0>
 b00:	28 1b       	sub	r18, r24
 b02:	39 0b       	sbc	r19, r25
 b04:	24 30       	cpi	r18, 0x04	; 4
 b06:	31 05       	cpc	r19, r1
 b08:	80 f4       	brcc	.+32     	; 0xb2a <malloc+0x9c>
 b0a:	8a 81       	ldd	r24, Y+2	; 0x02
 b0c:	9b 81       	ldd	r25, Y+3	; 0x03
 b0e:	61 15       	cp	r22, r1
 b10:	71 05       	cpc	r23, r1
 b12:	21 f0       	breq	.+8      	; 0xb1c <malloc+0x8e>
 b14:	fb 01       	movw	r30, r22
 b16:	93 83       	std	Z+3, r25	; 0x03
 b18:	82 83       	std	Z+2, r24	; 0x02
 b1a:	04 c0       	rjmp	.+8      	; 0xb24 <malloc+0x96>
 b1c:	90 93 ad 02 	sts	0x02AD, r25	; 0x8002ad <__flp+0x1>
 b20:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <__flp>
 b24:	fe 01       	movw	r30, r28
 b26:	32 96       	adiw	r30, 0x02	; 2
 b28:	44 c0       	rjmp	.+136    	; 0xbb2 <malloc+0x124>
 b2a:	fe 01       	movw	r30, r28
 b2c:	e2 0f       	add	r30, r18
 b2e:	f3 1f       	adc	r31, r19
 b30:	81 93       	st	Z+, r24
 b32:	91 93       	st	Z+, r25
 b34:	22 50       	subi	r18, 0x02	; 2
 b36:	31 09       	sbc	r19, r1
 b38:	39 83       	std	Y+1, r19	; 0x01
 b3a:	28 83       	st	Y, r18
 b3c:	3a c0       	rjmp	.+116    	; 0xbb2 <malloc+0x124>
 b3e:	20 91 aa 02 	lds	r18, 0x02AA	; 0x8002aa <__brkval>
 b42:	30 91 ab 02 	lds	r19, 0x02AB	; 0x8002ab <__brkval+0x1>
 b46:	23 2b       	or	r18, r19
 b48:	41 f4       	brne	.+16     	; 0xb5a <malloc+0xcc>
 b4a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 b4e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 b52:	30 93 ab 02 	sts	0x02AB, r19	; 0x8002ab <__brkval+0x1>
 b56:	20 93 aa 02 	sts	0x02AA, r18	; 0x8002aa <__brkval>
 b5a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 b5e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 b62:	21 15       	cp	r18, r1
 b64:	31 05       	cpc	r19, r1
 b66:	41 f4       	brne	.+16     	; 0xb78 <malloc+0xea>
 b68:	2d b7       	in	r18, 0x3d	; 61
 b6a:	3e b7       	in	r19, 0x3e	; 62
 b6c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 b70:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 b74:	24 1b       	sub	r18, r20
 b76:	35 0b       	sbc	r19, r21
 b78:	e0 91 aa 02 	lds	r30, 0x02AA	; 0x8002aa <__brkval>
 b7c:	f0 91 ab 02 	lds	r31, 0x02AB	; 0x8002ab <__brkval+0x1>
 b80:	e2 17       	cp	r30, r18
 b82:	f3 07       	cpc	r31, r19
 b84:	a0 f4       	brcc	.+40     	; 0xbae <malloc+0x120>
 b86:	2e 1b       	sub	r18, r30
 b88:	3f 0b       	sbc	r19, r31
 b8a:	28 17       	cp	r18, r24
 b8c:	39 07       	cpc	r19, r25
 b8e:	78 f0       	brcs	.+30     	; 0xbae <malloc+0x120>
 b90:	ac 01       	movw	r20, r24
 b92:	4e 5f       	subi	r20, 0xFE	; 254
 b94:	5f 4f       	sbci	r21, 0xFF	; 255
 b96:	24 17       	cp	r18, r20
 b98:	35 07       	cpc	r19, r21
 b9a:	48 f0       	brcs	.+18     	; 0xbae <malloc+0x120>
 b9c:	4e 0f       	add	r20, r30
 b9e:	5f 1f       	adc	r21, r31
 ba0:	50 93 ab 02 	sts	0x02AB, r21	; 0x8002ab <__brkval+0x1>
 ba4:	40 93 aa 02 	sts	0x02AA, r20	; 0x8002aa <__brkval>
 ba8:	81 93       	st	Z+, r24
 baa:	91 93       	st	Z+, r25
 bac:	02 c0       	rjmp	.+4      	; 0xbb2 <malloc+0x124>
 bae:	e0 e0       	ldi	r30, 0x00	; 0
 bb0:	f0 e0       	ldi	r31, 0x00	; 0
 bb2:	cf 01       	movw	r24, r30
 bb4:	df 91       	pop	r29
 bb6:	cf 91       	pop	r28
 bb8:	1f 91       	pop	r17
 bba:	0f 91       	pop	r16
 bbc:	08 95       	ret

00000bbe <free>:
 bbe:	cf 93       	push	r28
 bc0:	df 93       	push	r29
 bc2:	00 97       	sbiw	r24, 0x00	; 0
 bc4:	09 f4       	brne	.+2      	; 0xbc8 <free+0xa>
 bc6:	81 c0       	rjmp	.+258    	; 0xcca <free+0x10c>
 bc8:	fc 01       	movw	r30, r24
 bca:	32 97       	sbiw	r30, 0x02	; 2
 bcc:	13 82       	std	Z+3, r1	; 0x03
 bce:	12 82       	std	Z+2, r1	; 0x02
 bd0:	a0 91 ac 02 	lds	r26, 0x02AC	; 0x8002ac <__flp>
 bd4:	b0 91 ad 02 	lds	r27, 0x02AD	; 0x8002ad <__flp+0x1>
 bd8:	10 97       	sbiw	r26, 0x00	; 0
 bda:	81 f4       	brne	.+32     	; 0xbfc <free+0x3e>
 bdc:	20 81       	ld	r18, Z
 bde:	31 81       	ldd	r19, Z+1	; 0x01
 be0:	82 0f       	add	r24, r18
 be2:	93 1f       	adc	r25, r19
 be4:	20 91 aa 02 	lds	r18, 0x02AA	; 0x8002aa <__brkval>
 be8:	30 91 ab 02 	lds	r19, 0x02AB	; 0x8002ab <__brkval+0x1>
 bec:	28 17       	cp	r18, r24
 bee:	39 07       	cpc	r19, r25
 bf0:	51 f5       	brne	.+84     	; 0xc46 <free+0x88>
 bf2:	f0 93 ab 02 	sts	0x02AB, r31	; 0x8002ab <__brkval+0x1>
 bf6:	e0 93 aa 02 	sts	0x02AA, r30	; 0x8002aa <__brkval>
 bfa:	67 c0       	rjmp	.+206    	; 0xcca <free+0x10c>
 bfc:	ed 01       	movw	r28, r26
 bfe:	20 e0       	ldi	r18, 0x00	; 0
 c00:	30 e0       	ldi	r19, 0x00	; 0
 c02:	ce 17       	cp	r28, r30
 c04:	df 07       	cpc	r29, r31
 c06:	40 f4       	brcc	.+16     	; 0xc18 <free+0x5a>
 c08:	4a 81       	ldd	r20, Y+2	; 0x02
 c0a:	5b 81       	ldd	r21, Y+3	; 0x03
 c0c:	9e 01       	movw	r18, r28
 c0e:	41 15       	cp	r20, r1
 c10:	51 05       	cpc	r21, r1
 c12:	f1 f0       	breq	.+60     	; 0xc50 <free+0x92>
 c14:	ea 01       	movw	r28, r20
 c16:	f5 cf       	rjmp	.-22     	; 0xc02 <free+0x44>
 c18:	d3 83       	std	Z+3, r29	; 0x03
 c1a:	c2 83       	std	Z+2, r28	; 0x02
 c1c:	40 81       	ld	r20, Z
 c1e:	51 81       	ldd	r21, Z+1	; 0x01
 c20:	84 0f       	add	r24, r20
 c22:	95 1f       	adc	r25, r21
 c24:	c8 17       	cp	r28, r24
 c26:	d9 07       	cpc	r29, r25
 c28:	59 f4       	brne	.+22     	; 0xc40 <free+0x82>
 c2a:	88 81       	ld	r24, Y
 c2c:	99 81       	ldd	r25, Y+1	; 0x01
 c2e:	84 0f       	add	r24, r20
 c30:	95 1f       	adc	r25, r21
 c32:	02 96       	adiw	r24, 0x02	; 2
 c34:	91 83       	std	Z+1, r25	; 0x01
 c36:	80 83       	st	Z, r24
 c38:	8a 81       	ldd	r24, Y+2	; 0x02
 c3a:	9b 81       	ldd	r25, Y+3	; 0x03
 c3c:	93 83       	std	Z+3, r25	; 0x03
 c3e:	82 83       	std	Z+2, r24	; 0x02
 c40:	21 15       	cp	r18, r1
 c42:	31 05       	cpc	r19, r1
 c44:	29 f4       	brne	.+10     	; 0xc50 <free+0x92>
 c46:	f0 93 ad 02 	sts	0x02AD, r31	; 0x8002ad <__flp+0x1>
 c4a:	e0 93 ac 02 	sts	0x02AC, r30	; 0x8002ac <__flp>
 c4e:	3d c0       	rjmp	.+122    	; 0xcca <free+0x10c>
 c50:	e9 01       	movw	r28, r18
 c52:	fb 83       	std	Y+3, r31	; 0x03
 c54:	ea 83       	std	Y+2, r30	; 0x02
 c56:	49 91       	ld	r20, Y+
 c58:	59 91       	ld	r21, Y+
 c5a:	c4 0f       	add	r28, r20
 c5c:	d5 1f       	adc	r29, r21
 c5e:	ec 17       	cp	r30, r28
 c60:	fd 07       	cpc	r31, r29
 c62:	61 f4       	brne	.+24     	; 0xc7c <free+0xbe>
 c64:	80 81       	ld	r24, Z
 c66:	91 81       	ldd	r25, Z+1	; 0x01
 c68:	84 0f       	add	r24, r20
 c6a:	95 1f       	adc	r25, r21
 c6c:	02 96       	adiw	r24, 0x02	; 2
 c6e:	e9 01       	movw	r28, r18
 c70:	99 83       	std	Y+1, r25	; 0x01
 c72:	88 83       	st	Y, r24
 c74:	82 81       	ldd	r24, Z+2	; 0x02
 c76:	93 81       	ldd	r25, Z+3	; 0x03
 c78:	9b 83       	std	Y+3, r25	; 0x03
 c7a:	8a 83       	std	Y+2, r24	; 0x02
 c7c:	e0 e0       	ldi	r30, 0x00	; 0
 c7e:	f0 e0       	ldi	r31, 0x00	; 0
 c80:	12 96       	adiw	r26, 0x02	; 2
 c82:	8d 91       	ld	r24, X+
 c84:	9c 91       	ld	r25, X
 c86:	13 97       	sbiw	r26, 0x03	; 3
 c88:	00 97       	sbiw	r24, 0x00	; 0
 c8a:	19 f0       	breq	.+6      	; 0xc92 <free+0xd4>
 c8c:	fd 01       	movw	r30, r26
 c8e:	dc 01       	movw	r26, r24
 c90:	f7 cf       	rjmp	.-18     	; 0xc80 <free+0xc2>
 c92:	8d 91       	ld	r24, X+
 c94:	9c 91       	ld	r25, X
 c96:	11 97       	sbiw	r26, 0x01	; 1
 c98:	9d 01       	movw	r18, r26
 c9a:	2e 5f       	subi	r18, 0xFE	; 254
 c9c:	3f 4f       	sbci	r19, 0xFF	; 255
 c9e:	82 0f       	add	r24, r18
 ca0:	93 1f       	adc	r25, r19
 ca2:	20 91 aa 02 	lds	r18, 0x02AA	; 0x8002aa <__brkval>
 ca6:	30 91 ab 02 	lds	r19, 0x02AB	; 0x8002ab <__brkval+0x1>
 caa:	28 17       	cp	r18, r24
 cac:	39 07       	cpc	r19, r25
 cae:	69 f4       	brne	.+26     	; 0xcca <free+0x10c>
 cb0:	30 97       	sbiw	r30, 0x00	; 0
 cb2:	29 f4       	brne	.+10     	; 0xcbe <free+0x100>
 cb4:	10 92 ad 02 	sts	0x02AD, r1	; 0x8002ad <__flp+0x1>
 cb8:	10 92 ac 02 	sts	0x02AC, r1	; 0x8002ac <__flp>
 cbc:	02 c0       	rjmp	.+4      	; 0xcc2 <free+0x104>
 cbe:	13 82       	std	Z+3, r1	; 0x03
 cc0:	12 82       	std	Z+2, r1	; 0x02
 cc2:	b0 93 ab 02 	sts	0x02AB, r27	; 0x8002ab <__brkval+0x1>
 cc6:	a0 93 aa 02 	sts	0x02AA, r26	; 0x8002aa <__brkval>
 cca:	df 91       	pop	r29
 ccc:	cf 91       	pop	r28
 cce:	08 95       	ret

00000cd0 <strnlen_P>:
 cd0:	fc 01       	movw	r30, r24
 cd2:	05 90       	lpm	r0, Z+
 cd4:	61 50       	subi	r22, 0x01	; 1
 cd6:	70 40       	sbci	r23, 0x00	; 0
 cd8:	01 10       	cpse	r0, r1
 cda:	d8 f7       	brcc	.-10     	; 0xcd2 <strnlen_P+0x2>
 cdc:	80 95       	com	r24
 cde:	90 95       	com	r25
 ce0:	8e 0f       	add	r24, r30
 ce2:	9f 1f       	adc	r25, r31
 ce4:	08 95       	ret

00000ce6 <memset>:
 ce6:	dc 01       	movw	r26, r24
 ce8:	01 c0       	rjmp	.+2      	; 0xcec <memset+0x6>
 cea:	6d 93       	st	X+, r22
 cec:	41 50       	subi	r20, 0x01	; 1
 cee:	50 40       	sbci	r21, 0x00	; 0
 cf0:	e0 f7       	brcc	.-8      	; 0xcea <memset+0x4>
 cf2:	08 95       	ret

00000cf4 <strnlen>:
 cf4:	fc 01       	movw	r30, r24
 cf6:	61 50       	subi	r22, 0x01	; 1
 cf8:	70 40       	sbci	r23, 0x00	; 0
 cfa:	01 90       	ld	r0, Z+
 cfc:	01 10       	cpse	r0, r1
 cfe:	d8 f7       	brcc	.-10     	; 0xcf6 <strnlen+0x2>
 d00:	80 95       	com	r24
 d02:	90 95       	com	r25
 d04:	8e 0f       	add	r24, r30
 d06:	9f 1f       	adc	r25, r31
 d08:	08 95       	ret

00000d0a <fputc>:
 d0a:	0f 93       	push	r16
 d0c:	1f 93       	push	r17
 d0e:	cf 93       	push	r28
 d10:	df 93       	push	r29
 d12:	fb 01       	movw	r30, r22
 d14:	23 81       	ldd	r18, Z+3	; 0x03
 d16:	21 fd       	sbrc	r18, 1
 d18:	03 c0       	rjmp	.+6      	; 0xd20 <fputc+0x16>
 d1a:	8f ef       	ldi	r24, 0xFF	; 255
 d1c:	9f ef       	ldi	r25, 0xFF	; 255
 d1e:	2c c0       	rjmp	.+88     	; 0xd78 <fputc+0x6e>
 d20:	22 ff       	sbrs	r18, 2
 d22:	16 c0       	rjmp	.+44     	; 0xd50 <fputc+0x46>
 d24:	46 81       	ldd	r20, Z+6	; 0x06
 d26:	57 81       	ldd	r21, Z+7	; 0x07
 d28:	24 81       	ldd	r18, Z+4	; 0x04
 d2a:	35 81       	ldd	r19, Z+5	; 0x05
 d2c:	42 17       	cp	r20, r18
 d2e:	53 07       	cpc	r21, r19
 d30:	44 f4       	brge	.+16     	; 0xd42 <fputc+0x38>
 d32:	a0 81       	ld	r26, Z
 d34:	b1 81       	ldd	r27, Z+1	; 0x01
 d36:	9d 01       	movw	r18, r26
 d38:	2f 5f       	subi	r18, 0xFF	; 255
 d3a:	3f 4f       	sbci	r19, 0xFF	; 255
 d3c:	31 83       	std	Z+1, r19	; 0x01
 d3e:	20 83       	st	Z, r18
 d40:	8c 93       	st	X, r24
 d42:	26 81       	ldd	r18, Z+6	; 0x06
 d44:	37 81       	ldd	r19, Z+7	; 0x07
 d46:	2f 5f       	subi	r18, 0xFF	; 255
 d48:	3f 4f       	sbci	r19, 0xFF	; 255
 d4a:	37 83       	std	Z+7, r19	; 0x07
 d4c:	26 83       	std	Z+6, r18	; 0x06
 d4e:	14 c0       	rjmp	.+40     	; 0xd78 <fputc+0x6e>
 d50:	8b 01       	movw	r16, r22
 d52:	ec 01       	movw	r28, r24
 d54:	fb 01       	movw	r30, r22
 d56:	00 84       	ldd	r0, Z+8	; 0x08
 d58:	f1 85       	ldd	r31, Z+9	; 0x09
 d5a:	e0 2d       	mov	r30, r0
 d5c:	09 95       	icall
 d5e:	89 2b       	or	r24, r25
 d60:	e1 f6       	brne	.-72     	; 0xd1a <fputc+0x10>
 d62:	d8 01       	movw	r26, r16
 d64:	16 96       	adiw	r26, 0x06	; 6
 d66:	8d 91       	ld	r24, X+
 d68:	9c 91       	ld	r25, X
 d6a:	17 97       	sbiw	r26, 0x07	; 7
 d6c:	01 96       	adiw	r24, 0x01	; 1
 d6e:	17 96       	adiw	r26, 0x07	; 7
 d70:	9c 93       	st	X, r25
 d72:	8e 93       	st	-X, r24
 d74:	16 97       	sbiw	r26, 0x06	; 6
 d76:	ce 01       	movw	r24, r28
 d78:	df 91       	pop	r29
 d7a:	cf 91       	pop	r28
 d7c:	1f 91       	pop	r17
 d7e:	0f 91       	pop	r16
 d80:	08 95       	ret

00000d82 <__ultoa_invert>:
 d82:	fa 01       	movw	r30, r20
 d84:	aa 27       	eor	r26, r26
 d86:	28 30       	cpi	r18, 0x08	; 8
 d88:	51 f1       	breq	.+84     	; 0xdde <__ultoa_invert+0x5c>
 d8a:	20 31       	cpi	r18, 0x10	; 16
 d8c:	81 f1       	breq	.+96     	; 0xdee <__ultoa_invert+0x6c>
 d8e:	e8 94       	clt
 d90:	6f 93       	push	r22
 d92:	6e 7f       	andi	r22, 0xFE	; 254
 d94:	6e 5f       	subi	r22, 0xFE	; 254
 d96:	7f 4f       	sbci	r23, 0xFF	; 255
 d98:	8f 4f       	sbci	r24, 0xFF	; 255
 d9a:	9f 4f       	sbci	r25, 0xFF	; 255
 d9c:	af 4f       	sbci	r26, 0xFF	; 255
 d9e:	b1 e0       	ldi	r27, 0x01	; 1
 da0:	3e d0       	rcall	.+124    	; 0xe1e <__ultoa_invert+0x9c>
 da2:	b4 e0       	ldi	r27, 0x04	; 4
 da4:	3c d0       	rcall	.+120    	; 0xe1e <__ultoa_invert+0x9c>
 da6:	67 0f       	add	r22, r23
 da8:	78 1f       	adc	r23, r24
 daa:	89 1f       	adc	r24, r25
 dac:	9a 1f       	adc	r25, r26
 dae:	a1 1d       	adc	r26, r1
 db0:	68 0f       	add	r22, r24
 db2:	79 1f       	adc	r23, r25
 db4:	8a 1f       	adc	r24, r26
 db6:	91 1d       	adc	r25, r1
 db8:	a1 1d       	adc	r26, r1
 dba:	6a 0f       	add	r22, r26
 dbc:	71 1d       	adc	r23, r1
 dbe:	81 1d       	adc	r24, r1
 dc0:	91 1d       	adc	r25, r1
 dc2:	a1 1d       	adc	r26, r1
 dc4:	20 d0       	rcall	.+64     	; 0xe06 <__ultoa_invert+0x84>
 dc6:	09 f4       	brne	.+2      	; 0xdca <__ultoa_invert+0x48>
 dc8:	68 94       	set
 dca:	3f 91       	pop	r19
 dcc:	2a e0       	ldi	r18, 0x0A	; 10
 dce:	26 9f       	mul	r18, r22
 dd0:	11 24       	eor	r1, r1
 dd2:	30 19       	sub	r19, r0
 dd4:	30 5d       	subi	r19, 0xD0	; 208
 dd6:	31 93       	st	Z+, r19
 dd8:	de f6       	brtc	.-74     	; 0xd90 <__ultoa_invert+0xe>
 dda:	cf 01       	movw	r24, r30
 ddc:	08 95       	ret
 dde:	46 2f       	mov	r20, r22
 de0:	47 70       	andi	r20, 0x07	; 7
 de2:	40 5d       	subi	r20, 0xD0	; 208
 de4:	41 93       	st	Z+, r20
 de6:	b3 e0       	ldi	r27, 0x03	; 3
 de8:	0f d0       	rcall	.+30     	; 0xe08 <__ultoa_invert+0x86>
 dea:	c9 f7       	brne	.-14     	; 0xdde <__ultoa_invert+0x5c>
 dec:	f6 cf       	rjmp	.-20     	; 0xdda <__ultoa_invert+0x58>
 dee:	46 2f       	mov	r20, r22
 df0:	4f 70       	andi	r20, 0x0F	; 15
 df2:	40 5d       	subi	r20, 0xD0	; 208
 df4:	4a 33       	cpi	r20, 0x3A	; 58
 df6:	18 f0       	brcs	.+6      	; 0xdfe <__ultoa_invert+0x7c>
 df8:	49 5d       	subi	r20, 0xD9	; 217
 dfa:	31 fd       	sbrc	r19, 1
 dfc:	40 52       	subi	r20, 0x20	; 32
 dfe:	41 93       	st	Z+, r20
 e00:	02 d0       	rcall	.+4      	; 0xe06 <__ultoa_invert+0x84>
 e02:	a9 f7       	brne	.-22     	; 0xdee <__ultoa_invert+0x6c>
 e04:	ea cf       	rjmp	.-44     	; 0xdda <__ultoa_invert+0x58>
 e06:	b4 e0       	ldi	r27, 0x04	; 4
 e08:	a6 95       	lsr	r26
 e0a:	97 95       	ror	r25
 e0c:	87 95       	ror	r24
 e0e:	77 95       	ror	r23
 e10:	67 95       	ror	r22
 e12:	ba 95       	dec	r27
 e14:	c9 f7       	brne	.-14     	; 0xe08 <__ultoa_invert+0x86>
 e16:	00 97       	sbiw	r24, 0x00	; 0
 e18:	61 05       	cpc	r22, r1
 e1a:	71 05       	cpc	r23, r1
 e1c:	08 95       	ret
 e1e:	9b 01       	movw	r18, r22
 e20:	ac 01       	movw	r20, r24
 e22:	0a 2e       	mov	r0, r26
 e24:	06 94       	lsr	r0
 e26:	57 95       	ror	r21
 e28:	47 95       	ror	r20
 e2a:	37 95       	ror	r19
 e2c:	27 95       	ror	r18
 e2e:	ba 95       	dec	r27
 e30:	c9 f7       	brne	.-14     	; 0xe24 <__ultoa_invert+0xa2>
 e32:	62 0f       	add	r22, r18
 e34:	73 1f       	adc	r23, r19
 e36:	84 1f       	adc	r24, r20
 e38:	95 1f       	adc	r25, r21
 e3a:	a0 1d       	adc	r26, r0
 e3c:	08 95       	ret

00000e3e <_exit>:
 e3e:	f8 94       	cli

00000e40 <__stop_program>:
 e40:	ff cf       	rjmp	.-2      	; 0xe40 <__stop_program>
